[
  {
    "objectID": "posts/2022-05-17-r-tip-read-and-bind-files/index.html",
    "href": "posts/2022-05-17-r-tip-read-and-bind-files/index.html",
    "title": "R tip: Read and bind files",
    "section": "",
    "text": "R tip - This is how to read and bind data from many excel files:\n\n```{r}\n#| warning: false\n#| message: false\n\nlibrary(tidyverse)\nlibrary(readxl)\n\nfiles_list <- list.files(path = \".\",\n                         pattern = \"^plan(.)*.xlsx\",\n                         full.names = TRUE)\n\ndf <- \n  files_list %>% \n  map(read_excel) %>% \n  reduce(bind_rows)\n```\n\nI love how the reduce and map functions make everything simpler.\n\n\n\nCitationBibTeX citation:@misc{abreu2022,\n  author = {Marcos Abreu},\n  title = {R tip: Read and bind files},\n  date = {2022-05-17},\n  url = {https://abreums.github.io/posts/2022-05-17-r-tip-read-and-bind-files/},\n  langid = {pt-br}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2022. “R tip: Read and bind files.” May 17,\n2022. https://abreums.github.io/posts/2022-05-17-r-tip-read-and-bind-files/."
  },
  {
    "objectID": "posts/2022-11-05-r-tip-criando-tabelas-com-o-pacote-gt/index.html",
    "href": "posts/2022-11-05-r-tip-criando-tabelas-com-o-pacote-gt/index.html",
    "title": "R tip: criando tabelas com o pacote gt",
    "section": "",
    "text": "```{r setup}\n#| warning: false\n#| message: false\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(gt)\n```\n\n\nPinguins no formato padrão\nVamos começar com esta tabela do número de pinguíns por espécie, sexo, ano e ilha.\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer\n\npenguins_gt <- \n  penguins %>% \n  count(island, year, species, sex) %>% \n  filter(!is.na(sex)) %>% \n  pivot_wider(names_from = c(species, sex),\n              values_from = n,\n              names_glue = \"{species} ({sex})\",\n              values_fill = 0) %>% \n  gt()\n\npenguins_gt\n```\n\n\n\n\n\n  \n  \n    \n      island\n      year\n      Adelie (female)\n      Adelie (male)\n      Gentoo (female)\n      Gentoo (male)\n      Chinstrap (female)\n      Chinstrap (male)\n    \n  \n  \n    Biscoe\n2007\n5\n5\n16\n17\n0\n0\n    Biscoe\n2008\n9\n9\n22\n23\n0\n0\n    Biscoe\n2009\n8\n8\n20\n21\n0\n0\n    Dream\n2007\n9\n10\n0\n0\n13\n13\n    Dream\n2008\n8\n8\n0\n0\n9\n9\n    Dream\n2009\n10\n10\n0\n0\n12\n12\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n1. Retirar as linhas verticais\nA formatação padrão do pacote gt() já elimina as linhas verticais, senão esta seria nossa primeira tarefa.\n\n\n2. Alinhar os dados\nEm tabelas o alinhamento deve considerar:\n\ntextos: alinhar à esquerda\nnúmeros: alinhar à direita\n\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer2\n\npenguins_gt <- \n  penguins_gt %>% \n  cols_align(align = \"right\", \n             columns = c(`Adelie (female)`, `Adelie (male)`,\n                         `Gentoo (female)`, `Gentoo (male)`,\n                         `Chinstrap (female)`, `Chinstrap (male)`))\npenguins_gt\n```\n\n\n\n\n\n  \n  \n    \n      island\n      year\n      Adelie (female)\n      Adelie (male)\n      Gentoo (female)\n      Gentoo (male)\n      Chinstrap (female)\n      Chinstrap (male)\n    \n  \n  \n    Biscoe\n2007\n5\n5\n16\n17\n0\n0\n    Biscoe\n2008\n9\n9\n22\n23\n0\n0\n    Biscoe\n2009\n8\n8\n20\n21\n0\n0\n    Dream\n2007\n9\n10\n0\n0\n13\n13\n    Dream\n2008\n8\n8\n0\n0\n9\n9\n    Dream\n2009\n10\n10\n0\n0\n12\n12\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n3. Título para a tabela\nVamos acrescentar um título descrevendo as informações apresentadas.\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer3\n\npenguins_gt <- \n  penguins_gt %>% \n  tab_header(title = \"Pinguins no Arquipélago Palmer na Antártica\",\n             subtitle = \"palmerpinguins in R dataset\") %>% \n  opt_align_table_header(align = \"left\")\n\npenguins_gt\n```\n\n\n\n\n\n  \n    \n      Pinguins no Arquipélago Palmer na Antártica\n    \n    \n      palmerpinguins in R dataset\n    \n  \n  \n    \n      island\n      year\n      Adelie (female)\n      Adelie (male)\n      Gentoo (female)\n      Gentoo (male)\n      Chinstrap (female)\n      Chinstrap (male)\n    \n  \n  \n    Biscoe\n2007\n5\n5\n16\n17\n0\n0\n    Biscoe\n2008\n9\n9\n22\n23\n0\n0\n    Biscoe\n2009\n8\n8\n20\n21\n0\n0\n    Dream\n2007\n9\n10\n0\n0\n13\n13\n    Dream\n2008\n8\n8\n0\n0\n9\n9\n    Dream\n2009\n10\n10\n0\n0\n12\n12\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n4. Melhorar os nomes das colunas\nNomes das colunas são importantes em tabelas. No nosso caso, a repetição do nome da espécie para diferentes sexos torna a leitura entediante. Vamos agrupar as colunas por espécie.\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer5\n\npenguins_gt <- \n  penguins_gt %>% \n  cols_label(\n    `Adelie (female)` = \"female\",\n    `Adelie (male)`   = \"male\",\n    `Gentoo (female)` = \"female\",\n    `Gentoo (male)`   = \"male\",\n    `Chinstrap (female)` = \"female\",\n    `Chinstrap (male)` = \"male\"\n  ) %>% \n  tab_spanner(\n    label = c(\"Adele\"),\n    columns = c(`Adelie (female)`, `Adelie (male)`)\n  ) %>% \n  tab_spanner(\n    label = c(\"Chinstrap\"),\n    columns = c(`Chinstrap (female)`, `Chinstrap (male)`)\n  ) %>% \n  tab_spanner(\n    label = c(\"Gentoo\"),\n    columns = c(`Gentoo (female)`, `Gentoo (male)`)\n  ) %>% \n  tab_style(style = cell_text(weight = \"bold\"),\n            location = cells_column_spanners())\n\npenguins_gt\n```\n\n\n\n\n\n  \n    \n      Pinguins no Arquipélago Palmer na Antártica\n    \n    \n      palmerpinguins in R dataset\n    \n  \n  \n    \n      island\n      year\n      \n        Adele\n      \n      \n        Gentoo\n      \n      \n        Chinstrap\n      \n    \n    \n      female\n      male\n      female\n      male\n      female\n      male\n    \n  \n  \n    Biscoe\n2007\n5\n5\n16\n17\n0\n0\n    Biscoe\n2008\n9\n9\n22\n23\n0\n0\n    Biscoe\n2009\n8\n8\n20\n21\n0\n0\n    Dream\n2007\n9\n10\n0\n0\n13\n13\n    Dream\n2008\n8\n8\n0\n0\n9\n9\n    Dream\n2009\n10\n10\n0\n0\n12\n12\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n6. Agrupe colunas com dados que se repetem\nA coluna island é muito repetitiva e ao invés dela, podemos agrupar os dados em linhas agrupadoras.\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer6\n\npenguins_gt <- \n  penguins %>% \n  count(island, year, species, sex) %>% \n  mutate(island = str_c(\"Ilha: \", island)) %>% \n  filter(!is.na(sex)) %>% \n  pivot_wider(names_from = c(species, sex),\n              values_from = n,\n              names_glue = \"{species} ({sex})\",\n              values_fill = 0) %>% \n  gt(rowname_col = \"year\",\n    groupname_col = \"island\") %>% \n  tab_header(title = \"Pinguins no Arquipélago Palmer na Antártica\",\n             subtitle = \"palmerpinguins in R dataset\") %>% \n  opt_align_table_header(align = \"left\") %>% \n  cols_align(align = \"right\", \n             columns = c(`Adelie (female)`, `Adelie (male)`,\n                         `Gentoo (female)`, `Gentoo (male)`,\n                         `Chinstrap (female)`, `Chinstrap (male)`)) %>%\n  cols_label(\n    `Adelie (female)` = \"female\",\n    `Adelie (male)`   = \"male\",\n    `Gentoo (female)` = \"female\",\n    `Gentoo (male)`   = \"male\",\n    `Chinstrap (female)` = \"female\",\n    `Chinstrap (male)` = \"male\"\n  ) %>% \n  tab_spanner(\n    label = c(\"Adele\"),\n    columns = c(`Adelie (female)`, `Adelie (male)`)\n  ) %>% \n  tab_spanner(\n    label = c(\"Gentoo\"),\n    columns = c(`Gentoo (female)`, `Gentoo (male)`)\n  ) %>% \n  tab_spanner(\n    label = c(\"Chinstrap\"),\n    columns = c(`Chinstrap (female)`, `Chinstrap (male)`)\n  ) %>% \n  tab_style(style = cell_text(weight = \"bold\"),\n            location = cells_column_spanners()) %>% \n  tab_style(style = cell_text(weight = \"bold\"),\n            location = cells_row_groups())\n  # An option for positioning the row_group label\n  # %>%\n  # tab_options(\n  #   row_group.as_column = TRUE\n  # )\n\npenguins_gt\n```\n\n\n\n\n\n  \n    \n      Pinguins no Arquipélago Palmer na Antártica\n    \n    \n      palmerpinguins in R dataset\n    \n  \n  \n    \n      \n      \n        Adele\n      \n      \n        Gentoo\n      \n      \n        Chinstrap\n      \n    \n    \n      female\n      male\n      female\n      male\n      female\n      male\n    \n  \n  \n    \n      Ilha: Biscoe\n    \n    2007\n5\n5\n16\n17\n0\n0\n    2008\n9\n9\n22\n23\n0\n0\n    2009\n8\n8\n20\n21\n0\n0\n    \n      Ilha: Dream\n    \n    2007\n9\n10\n0\n0\n13\n13\n    2008\n8\n8\n0\n0\n9\n9\n    2009\n10\n10\n0\n0\n12\n12\n    \n      Ilha: Torgersen\n    \n    2007\n8\n7\n0\n0\n0\n0\n    2008\n8\n8\n0\n0\n0\n0\n    2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n7. Acrescentando linhas de sumarização\nLinhas de sumarização ajudam na leitura dos dados.\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer7\n\nfns_labels <- \n  list(\n   # avg = ~mean(., na.rm = TRUE),\n    `Média` = ~mean(., na.rm = TRUE)\n   #,\n   # s.d. = ~sd(., na.rm = TRUE)\n  )\n\npenguins_gt <- \n  penguins_gt %>% \n  summary_rows(\n    groups = TRUE,\n    columns = c(`Adelie (female)`, `Adelie (male)`,\n                `Gentoo (female)`, `Gentoo (male)`,\n                `Chinstrap (female)`, `Chinstrap (male)`),\n    fns = fns_labels,\n    formatter = fmt_number,\n    decimals = 0\n    ) %>% \n  tab_style(style = cell_fill(color = \"lightgray\"),\n            location = cells_summary())\n\npenguins_gt\n```\n\n\n\n\n\n  \n    \n      Pinguins no Arquipélago Palmer na Antártica\n    \n    \n      palmerpinguins in R dataset\n    \n  \n  \n    \n      \n      \n        Adele\n      \n      \n        Gentoo\n      \n      \n        Chinstrap\n      \n    \n    \n      female\n      male\n      female\n      male\n      female\n      male\n    \n  \n  \n    \n      Ilha: Biscoe\n    \n    2007\n5\n5\n16\n17\n0\n0\n    2008\n9\n9\n22\n23\n0\n0\n    2009\n8\n8\n20\n21\n0\n0\n    Média\n7\n7\n19\n20\n0\n0\n    \n      Ilha: Dream\n    \n    2007\n9\n10\n0\n0\n13\n13\n    2008\n8\n8\n0\n0\n9\n9\n    2009\n10\n10\n0\n0\n12\n12\n    Média\n9\n9\n0\n0\n11\n11\n    \n      Ilha: Torgersen\n    \n    2007\n8\n7\n0\n0\n0\n0\n    2008\n8\n8\n0\n0\n0\n0\n    2009\n8\n8\n0\n0\n0\n0\n    Média\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n8. Eliminar os valores com zero\nOs zeros atrapalham a leitura. Vamos substituí-los por um hífen para facilitar a leitura.\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer8\n\npenguins_gt <- \n  penguins_gt %>% \n  sub_zero(columns = c(`Adelie (female)`, `Adelie (male)`,\n                `Gentoo (female)`, `Gentoo (male)`,\n                `Chinstrap (female)`, `Chinstrap (male)`),\n           zero_text = \"-\")\n\npenguins_gt\n```\n\n\n\n\n\n  \n    \n      Pinguins no Arquipélago Palmer na Antártica\n    \n    \n      palmerpinguins in R dataset\n    \n  \n  \n    \n      \n      \n        Adele\n      \n      \n        Gentoo\n      \n      \n        Chinstrap\n      \n    \n    \n      female\n      male\n      female\n      male\n      female\n      male\n    \n  \n  \n    \n      Ilha: Biscoe\n    \n    2007\n5\n5\n16\n17\n-\n-\n    2008\n9\n9\n22\n23\n-\n-\n    2009\n8\n8\n20\n21\n-\n-\n    Média\n7\n7\n19\n20\n0\n0\n    \n      Ilha: Dream\n    \n    2007\n9\n10\n-\n-\n13\n13\n    2008\n8\n8\n-\n-\n9\n9\n    2009\n10\n10\n-\n-\n12\n12\n    Média\n9\n9\n0\n0\n11\n11\n    \n      Ilha: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Média\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n9. Acrescentar uma linha de sumarização total no final\nPara sabermos o total de pinguins em todas as ilhas, vamos acrescentar uma linha contendo uma\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer9\n\nfns_grand_labels <- \n  list(\n    `Média Geral` = ~mean(., na.rm = TRUE)\n  )\n\npenguins_gt <- \n  penguins_gt %>% \n  grand_summary_rows(\n    columns = c(`Adelie (female)`, `Adelie (male)`,\n                `Gentoo (female)`, `Gentoo (male)`,\n                `Chinstrap (female)`, `Chinstrap (male)`),\n   fns = fns_grand_labels,\n    formatter = fmt_number,\n    decimals = 0\n    ) %>% \n  tab_style(style = cell_fill(color = \"darkgray\"),\n            location = cells_grand_summary())\n\npenguins_gt\n```\n\n\n\n\n\n  \n    \n      Pinguins no Arquipélago Palmer na Antártica\n    \n    \n      palmerpinguins in R dataset\n    \n  \n  \n    \n      \n      \n        Adele\n      \n      \n        Gentoo\n      \n      \n        Chinstrap\n      \n    \n    \n      female\n      male\n      female\n      male\n      female\n      male\n    \n  \n  \n    \n      Ilha: Biscoe\n    \n    2007\n5\n5\n16\n17\n-\n-\n    2008\n9\n9\n22\n23\n-\n-\n    2009\n8\n8\n20\n21\n-\n-\n    Média\n7\n7\n19\n20\n0\n0\n    \n      Ilha: Dream\n    \n    2007\n9\n10\n-\n-\n13\n13\n    2008\n8\n8\n-\n-\n9\n9\n    2009\n10\n10\n-\n-\n12\n12\n    Média\n9\n9\n0\n0\n11\n11\n    \n      Ilha: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Média\n8\n8\n0\n0\n0\n0\n    Média Geral\n8\n8\n6\n7\n4\n4\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n\n\nCitationBibTeX citation:@misc{abreu2022,\n  author = {Marcos Abreu},\n  title = {R Tip: Criando Tabelas Com o Pacote Gt},\n  date = {2022-11-05},\n  url = {https://abreums.github.io/posts/2022-11-05-r-tip-criando-tabelas-para-o-pacote-gt/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2022. “R Tip: Criando Tabelas Com o Pacote\nGt.” November 5, 2022. https://abreums.github.io/posts/2022-11-05-r-tip-criando-tabelas-para-o-pacote-gt/."
  },
  {
    "objectID": "posts/2022-11-02-estimating-number-of-bugs/index.html",
    "href": "posts/2022-11-02-estimating-number-of-bugs/index.html",
    "title": "Estimating the number of bugs",
    "section": "",
    "text": "Consider the following situation:\nFor a software version 3 different testers found each one a different number of bugs in the system, but a total of 10 different bugs.\nTester 1 found bugs number 1, 2, 3, 4, and 5.\nTester 2 found bugs number 3, 5, 6, and 7 (two of the same bugs of Tester1, plus two other bugs not found by Tester 1).\nTester 3 found bugs 1, 3, 5, 8, 9, and 10.\nConsider each bug is equally difficult/easy to be found.\nThe 3 testers worked in an independent way. And they are equally efficient.\nHow many bugs could we estimate exist in this version of the system?\nTo solve this question let’s use the Mark and Capture strategy for estimation of populations as described by (Wikipedia n.d.).\nWe can estimate a number of 13 + 3 * stderr bugs, which is approximately 22 bugs."
  },
  {
    "objectID": "posts/2022-11-02-estimating-number-of-bugs/index.html#reference",
    "href": "posts/2022-11-02-estimating-number-of-bugs/index.html#reference",
    "title": "Estimating the number of bugs",
    "section": "Reference",
    "text": "Reference\n\n\nWikipedia. n.d. “Mark and Recapture.” Accessed November 2, 2022. https://en.wikipedia.org/wiki/Mark\\_and\\_recapture."
  },
  {
    "objectID": "posts/2022-10-27-lookahead-in-last-planner-system/index.html",
    "href": "posts/2022-10-27-lookahead-in-last-planner-system/index.html",
    "title": "Lookahead Planning in Last Planner System",
    "section": "",
    "text": "Ainda é muito comum encontrarmos uma visão tradicional do processo de planejamento estruturado na tentativa de tentar predizer a realidade. Este tipo de pensamento é comum quando se considera que o planejamento deve ser feito com o máximo de detalhes possível. Uma abordagem alternativa - e na minha opinião mais madura - está em considerar o planejamento como instrumento que precede e preside a ação para criar o futuro.\nNeste sentido o Last Planner System® (LPS), através de conceitos Lean provê processos mais adequados para uma visão moderna do processo de planejamento.\nUm conceito importante do Lean é a disponibilização de um fluxo de trabalho confiável. Para isto é preciso garantir que a equipe não tenha surpresas para as tarefas que lhe são solicitadas. Esta é a função do Lookahead Planning no LPS: uma ação pró-ativa para redução da incerteza.\n<continua>\n\n\n\nCitationBibTeX citation:@misc{abreu2022,\n  author = {Marcos Abreu},\n  title = {Lookahead Planning in Last Planner System},\n  date = {2022-10-27},\n  url = {https://abreums.github.io/posts/2022-10-27-lookahead-in-last-planner-system/},\n  langid = {pt-br}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2022. “Lookahead Planning in Last Planner\nSystem.” October 27, 2022. https://abreums.github.io/posts/2022-10-27-lookahead-in-last-planner-system/."
  },
  {
    "objectID": "posts/2022-11-08-r-tip-dumbbell-plot/index.html",
    "href": "posts/2022-11-08-r-tip-dumbbell-plot/index.html",
    "title": "R tip: dumbbell plot",
    "section": "",
    "text": "Compairing values are very trick in dataviz.\n\n```{r setup}\n#| warning: false\n#| message: false\n\nlibrary(tidyverse)\nlibrary(gapminder)\n```\n\nGetting life expectancy from South America contries.\n\nsouth_america <- \n  c(\"Argentina\", \"Bolivia\", \"Brazil\", \"Chile\",\n    \"Colombia\", \"Ecuador\", \"Paraguay\", \"Peru\",\n    \"Uruguay\", \"Venezuela\")\ngapminder::gapminder %>% \n  filter(country %in% south_america) \n\n# A tibble: 120 × 6\n   country   continent  year lifeExp      pop gdpPercap\n   <fct>     <fct>     <int>   <dbl>    <int>     <dbl>\n 1 Argentina Americas   1952    62.5 17876956     5911.\n 2 Argentina Americas   1957    64.4 19610538     6857.\n 3 Argentina Americas   1962    65.1 21283783     7133.\n 4 Argentina Americas   1967    65.6 22934225     8053.\n 5 Argentina Americas   1972    67.1 24779799     9443.\n 6 Argentina Americas   1977    68.5 26983828    10079.\n 7 Argentina Americas   1982    69.9 29341374     8998.\n 8 Argentina Americas   1987    70.8 31620918     9140.\n 9 Argentina Americas   1992    71.9 33958947     9308.\n10 Argentina Americas   1997    73.3 36203463    10967.\n# … with 110 more rows\n\n\n\n\n\nCitationBibTeX citation:@misc{abreu2022,\n  author = {Marcos Abreu},\n  title = {R tip: dumbbell plot},\n  date = {2022-11-08},\n  url = {https://abreums.github.io/posts/2022-11-08-r-tip-dumbbell-plot/},\n  langid = {pt-br}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2022. “R tip: dumbbell plot.” November 8,\n2022. https://abreums.github.io/posts/2022-11-08-r-tip-dumbbell-plot/."
  },
  {
    "objectID": "posts/2020-12-01-indicador-da-intencao-de-mudanca/index.html",
    "href": "posts/2020-12-01-indicador-da-intencao-de-mudanca/index.html",
    "title": "Indicador da intenção de mudança",
    "section": "",
    "text": "Conforme descrito por (Büssing et al. 2017), a probabilidade de uma pessoa mudar de comportamento é chamada pela teoria de Gestão de Mudanças de “intenção de mudar”.\nA intenção de mudar é influenciada por três fatores principais:\nPara exemplificar, considere que desejamos modificar o comportamento de uma pessoa em relação a forma como ela trata o lixo doméstico que produz em sua residência.\nAs atitudes se referem às crenças que esta pessoa possuir em relação a fatores como a necessidade social e econômica de tratamento do lixo e de reutilização de materiais, o entendimento desta pessoa sobre a contaminação do solo e das águas por resíduos não tratados, e outros entendimentos relacionados ao tratamento do lixo.\nPor normas sociais estamos nos referindo às crenças desta pessoa em relação ao que ela acredita que seus vizinhos, amigos e parentes pensam em relação aos mesmos fatores.\nPor fim, controle comportamental diz respeito às crenças da pessoa se o comportamento dela fará ou não diferença e se ela possui os conhecimentos necessários para mudar efetivamente seu próprio comportamento, por exemplo, identificar como cada resíduo deve ser separado.\nA importância para determinação do comportamento de cada um fatores dependerá tanto do comportamento em análise quanto da população sendo analisada.\nPor exemplo, para um mesmo grupo alvo, (Büssing et al. 2017) relatam que, para uma população de pessoas acima de 40 anos, identificaram diferentes fatores influenciando a intensão de realizar uma colonoscopia e a intensão de fazer exercícios regulares (diferentes comportamentos, diferentes fatores, mesmo público analisado). O que leva a considerar que para um dos casos para a mesma população seria necessário ter estratégias de comunicação diferentes."
  },
  {
    "objectID": "posts/2020-12-01-indicador-da-intencao-de-mudanca/index.html#medindo-a-intensão-de-mudar",
    "href": "posts/2020-12-01-indicador-da-intencao-de-mudanca/index.html#medindo-a-intensão-de-mudar",
    "title": "Indicador da intenção de mudança",
    "section": "Medindo a intensão de mudar",
    "text": "Medindo a intensão de mudar\nPara podermos medir a intensão de mudar é preciso primeiro descrever o comportamento desejado. Neste caso, é importante diferenciar entre comportamentos, categorias, e objetivos. Quanto mais específico melhor. Por exemplo, “caminhar 20min 3 vezes por semana” (comportamento) é melhor do que “exercitar-se” (categoria), e também do que “perder peso” (objetivo).\nPara auxiliar na elaboração de uma mensagem de suporte ao processo de mudança, é preciso conhecer a importância relativa entre as atitudes, normas sociais e controle comportamental. Neste caso o primeiro passo é identificar os determinantes que existem por trás de cada um dos fatores."
  },
  {
    "objectID": "posts/2020-12-01-indicador-da-intencao-de-mudanca/index.html#referências",
    "href": "posts/2020-12-01-indicador-da-intencao-de-mudanca/index.html#referências",
    "title": "Indicador da intenção de mudança",
    "section": "Referências",
    "text": "Referências\n\n\nBüssing, Arndt, Désirée Poier, Romy Lauche, Gustav Dobos, and Holger Cramer. 2017. “Validation of an Instrument to Measure Patients Intentions and Ability to Change Attitudes and Behavior.” Complementary Medicine Research 24 (4): 246–54. https://doi.org/10.1159/000477720."
  },
  {
    "objectID": "posts/2022-10-10-r-tip-counting-percentual-function-with-curly-curly/index.html",
    "href": "posts/2022-10-10-r-tip-counting-percentual-function-with-curly-curly/index.html",
    "title": "R tip: Counting percentual function with curly-curly",
    "section": "",
    "text": "The count function from dplyr package is one of my favorites for data wrangling.\nI like to include a percent column to the function results.\n\npenguins %>% \n  count(species, sort = T) %>% \n  mutate(percent = scales::percent(n/sum(n), scale = 100))\n\n# A tibble: 3 × 3\n  species       n percent\n  <fct>     <int> <chr>  \n1 Adelie      152 44.2%  \n2 Gentoo      124 36.0%  \n3 Chinstrap    68 19.8%  \n\n\nWhenever more than one column will be counted it is nice to write a small function for that.\n\ncount_percent <- function(df, a_column) {\n  df %>% \n    count({{a_column}}) %>% \n    mutate(percent = scales::percent(n/sum(n), scale = 100))\n}\n\npenguins %>% \n  count_percent(species)\n\n# A tibble: 3 × 3\n  species       n percent\n  <fct>     <int> <chr>  \n1 Adelie      152 44.2%  \n2 Chinstrap    68 19.8%  \n3 Gentoo      124 36.0%  \n\npenguins %>% \n  count_percent(island)\n\n# A tibble: 3 × 3\n  island        n percent\n  <fct>     <int> <chr>  \n1 Biscoe      168 49%    \n2 Dream       124 36%    \n3 Torgersen    52 15%    \n\n\nPara esta função funcionar é preciso utilizar o operador curly-curly.\n\n\n\nCitationBibTeX citation:@misc{abreu2020,\n  author = {Marcos Abreu},\n  title = {R tip: Counting percentual function with curly-curly},\n  date = {2020-10-10},\n  url = {https://abreums.github.io/posts/2022-10-10-r-tip-counting-percentual-function-with-curly-curly/},\n  langid = {pt-br}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2020. “R tip: Counting percentual function with\ncurly-curly.” October 10, 2020. https://abreums.github.io/posts/2022-10-10-r-tip-counting-percentual-function-with-curly-curly/."
  },
  {
    "objectID": "posts/2021-06-10-estimadores/index.html",
    "href": "posts/2021-06-10-estimadores/index.html",
    "title": "Estimadores",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\nVamos definir uma função que implementa o seguinte estimador para a média de uma distribuição:\n\\[\n\\tilde{Y} =  \\frac{1}{n-1} \\sum_{i = 1}^{n}Y_i\n\\]\n\n# defined estimator of Y_tilde\nY_tilde <- function(y) {\n  (1/(length(y)-1))*sum(y)\n}\n\n# get 5 observations from N(10,25)\nobservations <- rnorm(5, mean = 10, sqrt(25))\nY_tilde(observations)\n\n[1] 9.361599\n\n# repeat 10000 times\nset.seed(123)\nest_bias <- replicate(10000, Y_tilde(rnorm(5, mean = 10, sqrt(25))))\n\ndf <- tibble(est_bias = est_bias)\ndf %>% \n  ggplot(aes(x = est_bias)) +\n  geom_histogram() +\n  geom_vline(xintercept = 10, color = \"red\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nVamos repetir o exercício com amostrar maiores de 1000 elementos por amostra:\n\n# repeat 10000 times para amostras de tamanho 1000\nset.seed(123)\nest_bias <- replicate(10000, Y_tilde(rnorm(1000, mean = 10, sqrt(25))))\n\ndf <- tibble(est_bias = est_bias)\ndf %>% \n  ggplot(aes(x = est_bias)) +\n  geom_histogram() +\n  geom_vline(xintercept = 10, color = \"red\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nExemplo - Eficiência de um Estimador\nUm estimador é eficiente se os pesos somados resultam em 1.\n\ny_tilde1 <- function(y) {\n  (1/length(y))*sum(y)\n}\nset.seed(123)\nest_bar1 <- replicate(10000, y_tilde1(rnorm(100, mean = 5, sqrt(10))))\ndf <- tibble(est_bias = est_bar1)\ndf %>% \n  ggplot(aes(x = est_bias)) +\n  geom_histogram() +\n  geom_vline(xintercept = 5, color = \"red\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nvar(est_bar1)\n\n[1] 0.09953755\n\n\nUsando pesos diferentes para os 50 primeiros e 50 últimos.\n\nn = 100\nw = c(rep((1+0.5)/n, n/2), rep((1-0.5)/n, n/2))\n\ny_tilde2 <- function(y) {\n  sum(w*y)\n}\n\nest_tilde2 <- replicate(10000, expr = y_tilde2(rnorm(100, mean = 5, sqrt(10))))\ndf <- tibble(est_bias = est_tilde2)\ndf %>% \n  ggplot(aes(x = est_bias)) +\n  geom_histogram() +\n  geom_vline(xintercept = 5, color = \"red\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nvar(est_tilde2)\n\n[1] 0.1248949\n\n\n\n\n\nCitationBibTeX citation:@misc{abreu2021,\n  author = {Marcos Abreu},\n  title = {Estimadores},\n  date = {2021-06-10},\n  url = {https://abreums.github.io/posts/2021-06-10-estimadores/},\n  langid = {pt-br}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2021. “Estimadores.” June 10, 2021. https://abreums.github.io/posts/2021-06-10-estimadores/."
  },
  {
    "objectID": "posts/2019-02-25-welcome/index.html",
    "href": "posts/2019-02-25-welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a my blog. Welcome!\nI hope you enjoy the ideas I’m sharing here.\nThanks.\n\n\n\nCitationBibTeX citation:@misc{abreu2019,\n  author = {Marcos Abreu},\n  title = {Welcome To My Blog},\n  date = {2019-02-25},\n  url = {https://abreums.github.io/posts/2019-02-25-welcome/},\n  langid = {pt-br}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2019. “Welcome To My Blog.” February 25,\n2019. https://abreums.github.io/posts/2019-02-25-welcome/."
  },
  {
    "objectID": "posts/2022-11-05-r-tip-pivot-wider-com-mais-de-uma-coluna/index.html",
    "href": "posts/2022-11-05-r-tip-pivot-wider-com-mais-de-uma-coluna/index.html",
    "title": "R tip: como fazer pivot_wider com mais de uma coluna",
    "section": "",
    "text": "```{r setup}\n#| warning: false\n#| message: false\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(gt)\n```\n\nÉ possível usar a função pivot_wider com mais de uma coluna.\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Palmer Penguins - primeira versao\"\n#| label: palmer1\n\npalmerpenguins::penguins %>% \n  count(island, year, sex,species) %>% \n  gt()\n```\n\n\n\n\n\n  \n  \n    \n      island\n      year\n      sex\n      species\n      n\n    \n  \n  \n    Biscoe\n2007\nfemale\nAdelie\n5\n    Biscoe\n2007\nfemale\nGentoo\n16\n    Biscoe\n2007\nmale\nAdelie\n5\n    Biscoe\n2007\nmale\nGentoo\n17\n    Biscoe\n2007\nNA\nGentoo\n1\n    Biscoe\n2008\nfemale\nAdelie\n9\n    Biscoe\n2008\nfemale\nGentoo\n22\n    Biscoe\n2008\nmale\nAdelie\n9\n    Biscoe\n2008\nmale\nGentoo\n23\n    Biscoe\n2008\nNA\nGentoo\n1\n    Biscoe\n2009\nfemale\nAdelie\n8\n    Biscoe\n2009\nfemale\nGentoo\n20\n    Biscoe\n2009\nmale\nAdelie\n8\n    Biscoe\n2009\nmale\nGentoo\n21\n    Biscoe\n2009\nNA\nGentoo\n3\n    Dream\n2007\nfemale\nAdelie\n9\n    Dream\n2007\nfemale\nChinstrap\n13\n    Dream\n2007\nmale\nAdelie\n10\n    Dream\n2007\nmale\nChinstrap\n13\n    Dream\n2007\nNA\nAdelie\n1\n    Dream\n2008\nfemale\nAdelie\n8\n    Dream\n2008\nfemale\nChinstrap\n9\n    Dream\n2008\nmale\nAdelie\n8\n    Dream\n2008\nmale\nChinstrap\n9\n    Dream\n2009\nfemale\nAdelie\n10\n    Dream\n2009\nfemale\nChinstrap\n12\n    Dream\n2009\nmale\nAdelie\n10\n    Dream\n2009\nmale\nChinstrap\n12\n    Torgersen\n2007\nfemale\nAdelie\n8\n    Torgersen\n2007\nmale\nAdelie\n7\n    Torgersen\n2007\nNA\nAdelie\n5\n    Torgersen\n2008\nfemale\nAdelie\n8\n    Torgersen\n2008\nmale\nAdelie\n8\n    Torgersen\n2009\nfemale\nAdelie\n8\n    Torgersen\n2009\nmale\nAdelie\n8\n  \n  \n  \n\n\nPalmer Penguins - primeira versao\n\n\nVamos fazer pivot_wider com as colunas species e sex. Queremos que o resultado tenha as colunas com nomes como “Adele (female)”.\n\n```{r}\n#| warning: false\n#| message: false\n#| fig-cap: \"Quantidade de pinguins por espécie e sexo\"\n#| label: palmer2\n\npenguins %>% \n  count(island, year, species, sex) %>% \n  filter(!is.na(sex)) %>% \n  pivot_wider(names_from = c(species, sex),\n              values_from = n,\n              names_glue = \"{species} ({sex})\",\n              values_fill = 0) %>% \n  gt()\n```\n\n\n\n\n\n  \n  \n    \n      island\n      year\n      Adelie (female)\n      Adelie (male)\n      Gentoo (female)\n      Gentoo (male)\n      Chinstrap (female)\n      Chinstrap (male)\n    \n  \n  \n    Biscoe\n2007\n5\n5\n16\n17\n0\n0\n    Biscoe\n2008\n9\n9\n22\n23\n0\n0\n    Biscoe\n2009\n8\n8\n20\n21\n0\n0\n    Dream\n2007\n9\n10\n0\n0\n13\n13\n    Dream\n2008\n8\n8\n0\n0\n9\n9\n    Dream\n2009\n10\n10\n0\n0\n12\n12\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\nQuantidade de pinguins por espécie e sexo\n\n\n\n\n\nCitationBibTeX citation:@misc{abreu2022,\n  author = {Marcos Abreu},\n  title = {R tip: como fazer pivot\\_wider com mais de uma coluna},\n  date = {2022-11-05},\n  url = {https://abreums.github.io/posts/2022-11-05-r-tip-pivot-wider-com-mais-de-uma-coluna/},\n  langid = {pt-br}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2022. “R tip: como fazer pivot_wider com mais de uma\ncoluna.” November 5, 2022. https://abreums.github.io/posts/2022-11-05-r-tip-pivot-wider-com-mais-de-uma-coluna/."
  },
  {
    "objectID": "posts/2022-10-27-r-tip-como-customizar-cores-no-ggplot2/index.html",
    "href": "posts/2022-10-27-r-tip-como-customizar-cores-no-ggplot2/index.html",
    "title": "R tip: Como customizar cores no ggplot2",
    "section": "",
    "text": "Seguindo a regra de que se vc tiver que explicar alguma coisa mais de 3 vezes, então você deve escrever um post sobre o assunto. E considerando que neste caso, estou explicando para mim mesmo como definir cores no ggplo2, achei melhor escrever este post para me ajudar a lembrar destas informações na próxima vez que precisar delas.\nPara escrever este post utilizei as seguintes referências: (Aden-Buie 2019), (Jackson 2018) e (Hall 2022).\nEstou usando este site para buscar os códigos das cores. Vou utilizar a seguintes cores:"
  },
  {
    "objectID": "posts/2022-10-27-r-tip-como-customizar-cores-no-ggplot2/index.html#definindo-funções-para-lidar-com-cores",
    "href": "posts/2022-10-27-r-tip-como-customizar-cores-no-ggplot2/index.html#definindo-funções-para-lidar-com-cores",
    "title": "R tip: Como customizar cores no ggplot2",
    "section": "Definindo funções para lidar com cores",
    "text": "Definindo funções para lidar com cores\nVamos definir uma função para lidar com as cores que desejamos.\n\n```{r}\nminhas_cores <- function(...) {\n  cores <- c(\n    \"laranja\" = \"#e59866\",\n    \"cinza\" = \"#979a9a\",\n    \"azul\" = \"#1b2631\",\n    \"vermelho\" = \"#641e16\",\n    \"agua\" = \"#d1f2eb\",\n    \"amarelo\" = \"#fcf3cf\"\n  )\n  cols <- c(...)\n  \n  if (is.null(cols))\n    return (cores)\n  \n  cores[cols]\n}\n```\n\nA função acima permite acesso às cores:\n\n```{r}\nminhas_cores(\"vermelho\", \"amarelo\")\n```\n\n vermelho   amarelo \n\"#641e16\" \"#fcf3cf\" \n\n\nPodemos criar conjuntos diferentes de paletas de cores a partir das cores definidas na função minhas_cores.\n\n```{r}\nminhas_paletas <- function(palette = \"main\", ...) {\n  minhas_paletas <- list(\n    \"main\" = minhas_cores(\"laranja\", \"cinza\", \"vermelho\", \"amarelo\"),\n    \"highlight\" = minhas_cores(\"agua\", \"azul\", \"amarelo\"),\n    \"two_colors\" = minhas_cores(\"laranja\", \"vermelho\")\n  )\n  minhas_paletas[[palette]]\n}\n```\n\nIsto permite selecionar um subgrupo de cores:\n\n```{r}\nminhas_paletas(\"main\")\n```\n\n  laranja     cinza  vermelho   amarelo \n\"#e59866\" \"#979a9a\" \"#641e16\" \"#fcf3cf\" \n\n\nPodemos usar a função scales::show_col para mostrar as cores de uma forma elegante:\n\n```{r}\n#| fig-cap: \"paleta Main\"\n#| label: fig-main-palette\n\nscales::show_col(minhas_paletas(\"main\"), cex_label = 2)\n```\n\n\n\n\nFigure 2: paleta Main"
  },
  {
    "objectID": "posts/2022-10-27-r-tip-como-customizar-cores-no-ggplot2/index.html#usando-as-cores",
    "href": "posts/2022-10-27-r-tip-como-customizar-cores-no-ggplot2/index.html#usando-as-cores",
    "title": "R tip: Como customizar cores no ggplot2",
    "section": "Usando as cores",
    "text": "Usando as cores\nVamos utilizar as cores de Figure 2 em alguns gráficos.\n\n```{r}\n#| warning: false\n#| message: false\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n```\n\nPodemos referenciar as cores com a função minhas_cores definida anteriormente. Aqui, utilizamos o atributo fill de geom_col para definir a cor de preenchimento das barras do gráfico.\n\n```{r}\n#| fig-cap: \"Barras preenchidas por cor selecionada\"\n#| label: fig-pn-1\n\npenguins <- palmerpenguins::penguins\n\npenguins %>% \n  count(species) %>% \n  ggplot(aes(x = species, y = n)) +\n  geom_col(fill = minhas_cores(\"laranja\")) +\n  labs(title = \"Contagem de espécies\") +\n  scale_y_continuous(expand = expansion(mult = c(0,0.1))) + # aumenta em 10% o eixo y positivo \n  theme_linedraw() +\n  theme(axis.ticks = element_blank(), \n        axis.title = element_blank(),\n        panel.grid.major.x = element_blank())\n```\n\n\n\n\nFigure 3: Barras preenchidas por cor selecionada\n\n\n\n\nAtravés da função scale_fill_manual podemos usar diferentes cores para cada espécie de pinguim.\n\n```{r}\n#| fig-cap: \"Cores das barras atribuídas pela ordem alfabética das espécies\"\n#| label: fig-pn-2\n\npenguins %>%\n  count(species) %>% \n  ggplot(aes(x = species, y = n, fill = species)) + \n  geom_col() +\n  scale_fill_manual(values = unname(c(minhas_cores(\"laranja\", \"azul\", \"vermelho\")))) +\n  labs(title = \"Contagem de espécies\") +\n  scale_y_continuous(expand = expansion(mult = c(0,0.1))) +\n  theme_linedraw() +\n  theme(axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid.major.x = element_blank())\n```\n\n\n\n\nFigure 4: Cores das barras atribuídas pela ordem alfabética das espécies\n\n\n\n\nNo caso anterior as cores de cada espécie ficam dependentes da sequência com que as espécies são apresentadas - ordem alfabética - e da sequência das cores. Em alguns casos, gostaríamos que as cores ficassem atreladas às espécies específicas e não mudassem conforme a ordem dos atributos (o que é muito útil quando temos muitos gráficos) com os mesmos dados. Para isso, podemos associar cores às espécies nomeando um vetor com os nomes das espécies e os códigos das cores.\n\n```{r}\n#| fig-cap: \"Vetor nomeado de cores\"\n#| label: fig-named-colors\n\npenguins_colors <- minhas_cores(\"laranja\", \"azul\", \"vermelho\")\npenguins_colors <- setNames(penguins_colors, c(\"Gentoo\", \"Chinstrap\", \"Adelie\"))\npenguins_colors\nscales::show_col(penguins_colors, cex_label = 2)\n```\n\n   Gentoo Chinstrap    Adelie \n\"#e59866\" \"#1b2631\" \"#641e16\" \n\n\n\n\n\nFigure 5: Vetor nomeado de cores\n\n\n\n\ne utilizar este array da Figure 5 com a função scale_fill_manual. As cores são atribuídas conforme nomeamos cada elemento do vetor de cores (por exemplo, “Adele = #641e16 (vermelho)”. Se não tivéssemos feito isso, o sistema primeiro atribuiria as cores conforme a ordem alfabética como no código anterior e depois montaria o gráfico conforme a ordenação do fct_reorder.\n\n```{r}\n#| fig-cap: \"Usando o vetor nomeado\"\n#| label: fig-vetor-nomeado\n\npenguins %>% \n  count(species) %>% \n  ggplot(aes(x = fct_reorder(species, desc(n)), y = n, fill = species)) +\n  geom_col() +\n  scale_fill_manual(values = penguins_colors) +\n  labs(title = \"Contagem de espécies\") +\n  scale_y_continuous(expand = expansion(mult = c(0,0.1))) +\n  theme_linedraw() +\n  theme(axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid.major.x = element_blank())\n```\n\n\n\n\nFigure 6: Usando o vetor nomeado\n\n\n\n\nEm alguns gráficos pode ser necessário termos mais cores do que as disponíveis na paleta de cores. É possível gerar novas paletas com um número maior de cores por interpolação através da função colorRampPalette. A função colorRampPalette devolve uma função para a qual passaremos o número de cores que gostaríamos de gerar a partir da interpolação das cores da paleta fornecida.\n\n```{r}\n#| fig-cap: \"Usando _colorRampPalette_ para gerar paletas de cores maiores\"\n#| label: fig-pal-12\n\npenguins_12_colors <- colorRampPalette(minhas_paletas(\"highlight\"))(12)\n\nscales::show_col(penguins_12_colors, cex_label = 1)\n```\n\n\n\n\nFigure 7: Usando colorRampPalette para gerar paletas de cores maiores\n\n\n\n\nVamos colocar isto em uma função e testar.\n\n```{r}\n#| fig-cap: \"Função que devolve função para gerar cores\"\n#| label: fig-gera-cores\n\npenguin_pal <- function(palette = \"main\", reverse = FALSE, ...) {\n  pal <- minhas_paletas(palette)\n\n  if (reverse) pal <- rev(pal)\n\n  colorRampPalette(pal, ...)\n}\nscales::show_col(penguin_pal(palette = \"two_colors\", reverse = TRUE)(12))\n```\n\n\n\n\nFigure 8: Função que devolve função para gerar cores\n\n\n\n\nConsidere o seguinte gráfico que usa uma escala contínua de cores:\n\n```{r}\n#| fig-cap: \"Diagrama de dispersão\"\n#| label: fig-scatter1\npenguins %>% \n  filter(!is.na(bill_length_mm),\n         !is.na(bill_depth_mm)) %>% \n  ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +\n  geom_point() \n```\n\n\n\n\nFigure 9: Diagrama de dispersão\n\n\n\n\nGostaríamos de modificar a escala de cores utilizando as cores previamente definidas em minhas_cores e minhas_paletas.\nPrimeiro precisamos definir uma função que cria uma customização da função scale_color_continuous.\n\n```{r}\n#' Construtor de cores para escala contínua.\n#'\n#' @param palette nome da paleta definida em minhas_paletas\n#' @param discrete Boolean indica se \"color aesthetic\" é discreto ou não\n#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida\n#' @param ... outros parâmetros que serão passados para discrete_scale() ou\n#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE\n#'\nscale_color_penguin <- function(palette = \"main\", discrete = TRUE, reverse = FALSE, ...) {\n  pal <- penguin_pal(palette = palette, reverse = reverse)\n\n  if (discrete) {\n    discrete_scale(\"colour\", paste0(\"penguin_\", palette), palette = pal, ...)\n  } else {\n    scale_color_gradientn(colours = pal(256), ...)\n  }\n}\n\nscale_color_penguin(palette = \"highlight\", discrete = FALSE)\n```\n\n<ScaleContinuous>\n Range:  \n Limits:    0 --    1\n\n\nVamos ajustar o último gráfico que fizemos para utilizar uma paleta de cores baseada na minhas_paletas(“highlight”).\n\n```{r}\n#| fig-cap: \"Escala de cores customizada gerada a partir da paleta específica\"\n#| label: fig-scatter-2\n\npenguins %>% \n  filter(!is.na(bill_length_mm),\n         !is.na(bill_depth_mm)) %>% \n  ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +\n  geom_point() +\n  scale_color_penguin(\"two_colors\", discrete = FALSE)\n```\n\n\n\n\nFigure 10: Escala de cores customizada gerada a partir da paleta específica\n\n\n\n\nDe forma similar à função color que fizemos, podemos implementar uma função para fill:\n\n```{r}\n#' Construtor de cores para escala contínua.\n#'\n#' @param palette nome da paleta definida em minhas_paletas\n#' @param discrete Boolean indica se \"color aesthetic\" é discreto ou não\n#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida\n#' @param ... outros parâmetros que serão passados para discrete_scale() ou\n#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE\n#'\nscale_fill_penguin <- function(palette = \"main\", discrete = TRUE, reverse = FALSE, ...) {\n  pal <- penguin_pal(palette = palette, reverse = reverse)\n\n  if (discrete) {\n    discrete_scale(\"fill\", paste0(\"penguin_\", palette), palette = pal, ...)\n  } else {\n    scale_fill_gradientn(colours = pal(256), ...)\n  }\n}\n```\n\n\n```{r}\n#| fig-cap: \"Cores de preenchimento geradas a partir de paleta específica\"\n#| label: fig-barchart\n\npenguins %>% \n   filter(!is.na(bill_length_mm),\n         !is.na(bill_depth_mm)) %>% \n  ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +\n  geom_col() +\n  scale_color_penguin(\"two_colors\", discrete = FALSE)\n```\n\n\n\n\nFigure 11: Cores de preenchimento geradas a partir de paleta específica\n\n\n\n\nEste último gráfico não faz muito sentido, mas está aí apenas para exemplificar o uso da função scale_fill_penguin.\n\nReferências\n\n\nAden-Buie, Garrick. 2019. “Custom Discrete Color Scales for Ggplot2.” https://www.garrickadenbuie.com/blog/custom-discrete-color-scales-for-ggplot2/.\n\n\nHall, Meghan. 2022. “Creating Custom Color Palettes with Ggplot2.” https://meghan.rbind.io/blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/.\n\n\nJackson, Simon. 2018. “Creating Corporate Colour Palettes for Ggplot2.” https://drsimonj.svbtle.com/creating-corporate-colour-palettes-for-ggplot2."
  },
  {
    "objectID": "posts/2022-11-06-r-tip-tabelas-com-gtextras/index.html",
    "href": "posts/2022-11-06-r-tip-tabelas-com-gtextras/index.html",
    "title": "R tip: tabelas com gtExtras",
    "section": "",
    "text": "```{r setup}\n#| warning: false\n#| message: false\n\nlibrary(palmerpenguins)\nlibrary(tidyverse)\nlibrary(gt)\nlibrary(gtExtras)\n```\n\n\nPinguins com gtExtras\nNo post anterior apresentamos alguns recursos do pacote gt para produzir tabelas. Neste post vamos apresentar o recurso do pacote gtExtras para destacar informações através de sparklines.\n\n\nSPARKLINES\nVamos começar apresentando as informações de palmerpenguins destacando a evolução das quantidades conforme o ano de medição.\n\n```{r}\n#| warning: false\n#| message: false\npenguins_gt <- \n  penguins %>% \n  count(species, year) %>% \n  pivot_wider(names_from = year,\n              values_from = n) %>% \n  gt() \n\npenguins_gt\n```\n\n\n\n\n\n  \n  \n    \n      species\n      2007\n      2008\n      2009\n    \n  \n  \n    Adelie\n50\n50\n52\n    Chinstrap\n26\n18\n24\n    Gentoo\n34\n46\n44\n  \n  \n  \n\n\n\n\nQueremos acrescentar sparklines indicando as variações de quantidades por ano.\n\n```{r}\n#| warning: false\n#| message: false\npenguins_gt <- \n  penguins %>% \n  count(species, year) %>% \n  group_by(species) %>% \n  mutate(evolution = list(n)) %>% \n  ungroup() %>% \n  pivot_wider(names_from = year,\n              values_from = n) %>% \n  relocate(evolution, .after = last_col()) %>% \n  arrange(desc(`2009`)) %>% \n  gt() %>% \n  tab_header(title = \"Pinguins no Arquipélago Palmer na Antártica\",\n             subtitle = \"palmerpinguins in R dataset\") %>% \n  opt_align_table_header(align = \"left\") %>% \n  cols_align(align = \"left\", \n             columns = c(species)) %>% \n  cols_align(align = \"right\", \n             columns = c(`2007`, `2008`, `2009`)) %>% \n  cols_align(align = \"center\",\n             columns = c(evolution)) %>% \n  cols_label(\n    species = \"Espécie\",\n    evolution = \"Evolução\"\n  ) %>% \n  tab_spanner(\n    label = c(\"Ano de medição\"),\n    columns = c(`2007`, `2008`, `2009`)\n  ) %>% \n  gt_plt_sparkline(evolution)\n\n# my_path = str_c(getwd(), \"/posts/2022-11-06-r-tip-tabelas-com-gtextras\")\n# penguins_gt %>% \n#   gtsave(filename = \"new_penguins.png\",\n#          path = my_path)\n\npenguins_gt\n```\n\n\n\n\n\n  \n    \n      Pinguins no Arquipélago Palmer na Antártica\n    \n    \n      palmerpinguins in R dataset\n    \n  \n  \n    \n      Espécie\n      \n        Ano de medição\n      \n      Evolução\n    \n    \n      2007\n      2008\n      2009\n    \n  \n  \n    Adelie\n50\n50\n52\n          52.0\n    Gentoo\n34\n46\n44\n          44.0\n    Chinstrap\n26\n18\n24\n          24.0\n  \n  \n  \n\n\n\n\nAlso, we re-arranged the rows in descend order of values for 2009.\n\n\n\n\nCitationBibTeX citation:@misc{abreu2022,\n  author = {Marcos Abreu},\n  title = {R Tip: Tabelas Com {gtExtras}},\n  date = {2022-11-06},\n  url = {https://abreums.github.io/posts/2022-11-06-r-tip-tabelas-com-gtextras/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nMarcos Abreu. 2022. “R Tip: Tabelas Com gtExtras.” November\n6, 2022. https://abreums.github.io/posts/2022-11-06-r-tip-tabelas-com-gtextras/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Marcos Abreu's blog",
    "section": "",
    "text": "R tip: dumbbell plot\n\n\n\n\n\n\n\nRstat\n\n\n\n\nDumbbell plots are good to compaire different values of a measurement, showing difference. Similar to dodged bar charts, but much better\n\n\n\n\n\n\nNov 8, 2022\n\n\nMarcos Abreu\n\n\n\n\n\n\n  \n\n\n\n\nR tip: tabelas com gtExtras\n\n\n\n\n\n\n\nRstat\n\n\n\n\nUso do pacote gtExtrsa para formatar tabelas\n\n\n\n\n\n\nNov 6, 2022\n\n\nMarcos Abreu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR tip: criando tabelas com o pacote gt\n\n\n\n\n\n\n\nRstat\n\n\n\n\nUso do pacote gt para formatar tabelas\n\n\n\n\n\n\nNov 5, 2022\n\n\nMarcos Abreu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR tip: como fazer pivot_wider com mais de uma coluna\n\n\n\n\n\n\n\nRstat\n\n\n\n\npivot_wider com mais de uma coluna\n\n\n\n\n\n\nNov 5, 2022\n\n\nMarcos Abreu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEstimating the number of bugs\n\n\n\n\n\n\n\nRstat\n\n\n\n\nHow to estimate the number of bugs in a software deploy\n\n\n\n\n\n\nNov 2, 2022\n\n\nMarcos Abreu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLookahead Planning in Last Planner System\n\n\n\n\n\n\n\nGestão\n\n\n\n\nLookahead concept in the Last Planner System\n\n\n\n\n\n\nOct 27, 2022\n\n\nMarcos Abreu\n\n\n\n\n\n\n  \n\n\n\n\nR tip: Como customizar cores no ggplot2\n\n\n\n\n\n\n\nRstat\n\n\n\n\nRstat - uso do ggplot2 com paletas de cores customizadas para variáveis discretas e contínuas nas estéticas colour e fill.\n\n\n\n\n\n\nOct 27, 2022\n\n\nMarcos Abreu\n\n\n\n\n\n\n  \n\n\n\n\nR tip: Read and bind files\n\n\n\n\n\n\n\nRstat\n\n\n\n\nFirst post in my new Quarto blog\n\n\n\n\n\n\nMay 17, 2022\n\n\nMarcos Abreu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEstimadores\n\n\n\n\n\n\n\nRstat\n\n\n\n\nEstimadores estatísticos\n\n\n\n\n\n\nJun 10, 2021\n\n\nMarcos Abreu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIndicador da intenção de mudança\n\n\n\n\n\n\n\nchange management\n\n\n\n\nUma descrição de quais são os fatores que constituem o indicador de intenção de mudança.\n\n\n\n\n\n\nDec 1, 2020\n\n\nMarcos Abreu\n\n\n\n\n\n\n  \n\n\n\n\nR tip: Counting percentual function with curly-curly\n\n\n\n\n\n\n\nRstat\n\n\n\n\nRstat - Counting percentual function with curly-curly\n\n\n\n\n\n\nOct 10, 2020\n\n\nMarcos Abreu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nNews\n\n\n\n\nFirst post in my new Quarto blog\n\n\n\n\n\n\nFeb 25, 2019\n\n\nMarcos Abreu\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Marcos Abreu works as Project Manager and Change Manager. His experience includes Data Analytics, cloud base systems, e-commerce, sales and marketing systems, financial and procurement systems, portfolio management, program managent and agile practices.\nHe also act as professor in University teaching Project Management, ITIL and Change Management.\nData analysis and statistics are his favorite subjects."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\nFundação Getúlio Vargas\nMBA in Project Management | 2002 - 2003.\nUNICAMP\nElectric Engineering | 1987 - 1991"
  },
  {
    "objectID": "about.html#recent-experience",
    "href": "about.html#recent-experience",
    "title": "About",
    "section": "Recent Experience",
    "text": "Recent Experience\nExxon Mobil | Change Management Advisor | August 2021 - October 2022\nG4F | Project Manager | November 2020 - July 2021\nNTT Data | Abril 2016 - February 2020\nICG | September 2013 - January 2016\nKonsultex | July 2012 - August 2013\nPM21 | July 2003 - November 2011"
  }
]