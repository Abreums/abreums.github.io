combined_data <-
combined_data |>
mutate(sample_generated = list(map(1:num_of_samples,
~ sample(populacao$elemento,
sample_size))))
combined_data
combined_data <-
combined_data |>
mutate(sample_generated = list(num_of_samples,
sample_size))
combined_data <-
combined_data |>
mutate(sample_generated = c(num_of_samples,
sample_size))
combined_data
combined_data |>
mutate(x <- 1:num_of_samples |> map(~ sample(populacao$elemento, sample_size) |> mean()) |> reduce(c))
computes_mean_of_samples <- function(a_vector, sample_size, num_of_samples) {
x <- 1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
computes_mean_of_samples(populacao$elemento,
50,
2)
computes_mean_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
computes_mean_of_samples(populacao$elemento,
50,
2)
computes_mean_of_samples(populacao$elemento,
50,
5)
computes_mean_of_samples(populacao$elemento,
100,
4)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
computes_mean_of_samples(populacao$elemento,
100,
4)
combined_data |>
mutate(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c) |>
list()
}
combined_data |>
mutate(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
computes_dist_of_means_of_samples(populacao$elemento,
10,
10)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c) |>
tibble()
}
computes_dist_of_means_of_samples(populacao$elemento,
10,
10)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
tibble(
val = 1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
)
}
computes_dist_of_means_of_samples(populacao$elemento,
10,
10)
combined_data |>
mutate(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
computes_dist_of_means_of_samples(populacao$elemento,
10,
10)
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
combined_data <-
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
combined_data <-
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples),
mean_value = mean(values))
combined_data <-
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
combined_data <-
my_data |>
expand(sample_size, num_of_samples)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
tibble(
val = 1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
)
}
combined_data <-
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
combined_data |>
ggplot(aes(x = values)) +
geom_histogram() +
facet_grid( sample_size ~ num_of_samples)
?facet_grid
combined_data |>
ggplot(aes(x = values)) +
geom_histogram() +
facet_grid(vars(sample_size),
vars(num_of_samples))
View(combined_data)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
combined_data <-
my_data |>
expand(sample_size, num_of_samples)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
combined_data <-
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
View(combined_data)
combined_data |>
ggplot(aes(x = values)) +
geom_histogram() +
facet_grid(vars(sample_size),
vars(num_of_samples))
?facet_grid
combined_data |>
ggplot(aes(x = values)) +
geom_histogram() +
facet_grid(sample_size ~ num_of_samples)
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(full = "lightgray") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = NULL,
y = NULL)
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(fill = "lightgray") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = NULL,
y = NULL)
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(fill = "#668877") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = NULL,
y = NULL)
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(fill = "#668877") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = NULL,
y = NULL) +
theme_minimal()
#| echo: fenced
#| warning: false
#| message: false
library(tidyverse)
num = 100000
# criamos uma população de 1000 elementos distribuidos entre 0 e 1 uniformemente
populacao = tibble(elemento = runif(n = num))
populacao |>
ggplot() +
geom_histogram(aes(elemento),
bins = 20,
fill = "steelblue",
color = "white") +
theme_minimal() +
labs(title = "Histograma com 1.000 elementos com valores entre 0 até 1",
x = NULL,
y = NULL)
my_data = tibble(
sample_size = as.integer(c(50, 1000, 10000)),
num_of_samples = as.integer(c(50, 200, 500))
)
combined_data <-
my_data |>
expand(sample_size, num_of_samples)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
combined_data <-
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(fill = "#668877") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = "Variações no número de amostras",
y = "Variações no tamanho das amostras") +
theme_minimal()
my_data = tibble(
sample_size = as.integer(c(50, 1000, 10000)),
num_of_samples = as.integer(c(50, 200, 5000))
)
combined_data <-
my_data |>
expand(sample_size, num_of_samples)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
combined_data <-
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(fill = "#668877") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = "Variações no número de amostras",
y = "Variações no tamanho das amostras") +
theme_minimal()
my_data = tibble(
sample_size = as.integer(c(50, 1000, 5000)),
num_of_samples = as.integer(c(50, 200, 500))
)
combined_data <-
my_data |>
expand(sample_size, num_of_samples)
computes_dist_of_means_of_samples <- function(a_vector, sample_size, num_of_samples) {
1:num_of_samples |>
map(~ sample(a_vector,
sample_size) |>
mean()) |>
reduce(c)
}
combined_data <-
combined_data |>
group_by(sample_size, num_of_samples) |>
summarise(values = computes_dist_of_means_of_samples(populacao$elemento,
sample_size,
num_of_samples))
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(fill = "#668877") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = "Variações no número de amostras",
y = "Variações no tamanho das amostras") +
theme_minimal()
ggsave()
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(fill = "#668877") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = "Variações no número de amostras",
y = "Variações no tamanho das amostras") +
theme_minimal()
ggsave("distrib_facet_plot")
combined_data |>
ggplot(aes(x = values)) +
geom_histogram(fill = "#668877") +
facet_grid(sample_size ~ num_of_samples) +
labs(title = "Distribuições do valor médio de amostras para diferentes tamanhos de amostras e diferentes números de amostras coletados",
x = "Variações no número de amostras",
y = "Variações no tamanho das amostras") +
theme_minimal()
# Packages
library(tidyverse)
library(tidymodels)
library(rosdata)
#| echo: false
#| warning: false
#| error: false
#| message: false
plot_data <-
hibbs %>%
mutate(
label = str_glue("  {inc_party_candidate} vs. {other_candidate} ({year})  "),
hjust =
if_else(
year %in% c(1960, 1964, 1972, 1976, 1984, 1996, 2012),
"right",
"left"
),
vjust =
case_when(
year == 1992 ~ 0,
year == 2000 ~ 0.2,
year %in% c(1960, 2008) ~ 1,
TRUE ~ 0.5
)
) |> as_tibble()
my_plot <-
plot_data |>
ggplot(aes(growth, vote)) +
geom_hline(yintercept = 50, color = "lightgrey") +
geom_point()  +
geom_text(aes(label = label, hjust = hjust, vjust = vjust)) +
labs(
title = "Forecasting the election from economy",
x = "Average recent growth in personal income",
y = "Incumbent party's vote share"
) +
scale_x_continuous(labels = scales::label_percent(accuracy = 1, scale = 1),
expand = expansion(add = c(0.8, 1.2))) +
scale_y_continuous(labels = scales::label_percent(accuracy = 1, scale = 1)) +
theme_minimal()
# Primeiro passo é definir um modelo
lm_spec <- linear_reg() %>%
set_mode("regression") %>%
set_engine("stan")
# Segundo passo é ajustar o modelo
lm_fit <- fit(lm_spec, vote ~ growth, data = hibbs)
tidy_terms <- broom.mixed::tidy(lm_fit)
my_intercept = tidy_terms$estimate[tidy_terms$term == "(Intercept)"]
my_slope = tidy_terms$estimate[tidy_terms$term == "growth"]
my_sigma = glance(lm_fit)$sigma[1]
my_plot <-
my_plot +
geom_abline(intercept = my_intercept,
slope = my_slope,
color = "#FF9977
")
my_plot <-
my_plot +
geom_abline(intercept = my_intercept,
slope = my_slope,
color = "#FF9977
")
my_plot <-
my_plot +
geom_abline(intercept = my_intercept,
slope = my_slope,
color = "#FF9977
")
my_plot
# Primeiro passo é definir um modelo
lm_spec <- linear_reg() %>%
set_mode("regression") %>%
set_engine("stan")
# Segundo passo é ajustar o modelo
lm_fit <- fit(lm_spec, vote ~ growth, data = hibbs)
tidy_terms <- broom.mixed::tidy(lm_fit)
my_intercept = tidy_terms$estimate[tidy_terms$term == "(Intercept)"]
my_slope = tidy_terms$estimate[tidy_terms$term == "growth"]
my_sigma = glance(lm_fit)$sigma[1]
my_plot <-
my_plot +
geom_abline(intercept = my_intercept,
slope = my_slope,
color = "#FF9977")
my_plot
#| echo: false
#| warning: false
#| error: false
#| message: false
plot_data <-
hibbs %>%
mutate(
label = str_glue("  {inc_party_candidate} vs. {other_candidate} ({year})  "),
hjust =
if_else(
year %in% c(1960, 1964, 1972, 1976, 1984, 1996, 2012),
"right",
"left"
),
vjust =
case_when(
year == 1992 ~ 0,
year == 2000 ~ 0.2,
year %in% c(1960, 2008) ~ 1,
TRUE ~ 0.5
)
) |> as_tibble()
my_plot <-
plot_data |>
ggplot(aes(growth, vote)) +
geom_hline(yintercept = 50, color = "lightgrey") +
geom_point()  +
geom_text(aes(label = label, hjust = hjust, vjust = vjust)) +
labs(
title = "Forecasting the election from economy",
x = "Average recent growth in personal income",
y = "Incumbent party's vote share"
) +
scale_x_continuous(labels = scales::label_percent(accuracy = 1, scale = 1),
expand = expansion(add = c(0.8, 1.2))) +
scale_y_continuous(labels = scales::label_percent(accuracy = 1, scale = 1)) +
theme_minimal()
my_plot
# Primeiro passo é definir um modelo
lm_spec <- linear_reg() %>%
set_mode("regression") %>%
set_engine("stan")
# Segundo passo é ajustar o modelo
lm_fit <- fit(lm_spec, vote ~ growth, data = hibbs)
tidy_terms <- broom.mixed::tidy(lm_fit)
my_intercept = tidy_terms$estimate[tidy_terms$term == "(Intercept)"]
my_slope = tidy_terms$estimate[tidy_terms$term == "growth"]
my_sigma = glance(lm_fit)$sigma[1]
my_plot <-
my_plot +
geom_abline(intercept = my_intercept,
slope = my_slope,
color = "#FF9977")
my_plot
#| echo: fenced
#| warning: false
#| error: false
#| message: false
x = hibbs$growth
n = length(x)
y = my_slope * x + my_intercept + rnorm(n, 0, my_sigma)
fake_data = tibble(
vote = y,
growth = x
)
fake_data
# Primeiro passo é definir um modelo
lm_spec <- linear_reg() %>%
set_mode("regression") %>%
set_engine("stan")
# Segundo passo é ajustar o modelo
lm_fit <- fit(lm_spec, vote ~ growth, data = fake_data)
lm_fit
c("apple", "catalog", "battlecat") |> str_replace(patter = "cat")
library(stringr)
c("apple", "catalog", "battlecat") |> str_replace(patter = "cat")
c("apple", "catalog", "battlecat") |> str_detect(patter = "cat")
