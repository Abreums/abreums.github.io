penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n)) +
geom_col(fill = minhas_cores("laranja")) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) + # aumenta em 10% o eixo y positivo
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = unname(c(minhas_cores("laranja", "azul", "vermelho")))) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins_colors <- minhas_cores("laranja", "azul", "vermelho")
penguins_colors <- setNames(penguins_colors, c("Gentoo", "Chinstrap", "Adelie"))
penguins_colors
scales::show_col(penguins_colors, cex_label = 2)
penguins %>%
count(species) %>%
ggplot(aes(x = fct_reorder(species, desc(n)), y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = penguins_colors) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins_12_colors <- colorRampPalette(minhas_paletas("highlight"))(12)
scales::show_col(penguins_12_colors, cex_label = 1)
penguin_pal <- function(palette = "main", reverse = FALSE, ...) {
pal <- minhas_paletas(palette)
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
scales::show_col(penguin_pal(palette = "highlight", reverse = TRUE)(12))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
#' Construtor de cores para escala contínua.
#'
#' @param palette nome da paleta definida em minhas_paletas
#' @param discrete Boolean indica se "color aesthetic" é discreto ou não
#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida
#' @param ... outros parâmetros que serão passados para discrete_scale() ou
#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE
#'
scale_color_penguin <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- minhas_paletas(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("penguin_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
palette = "main"
pal <- minhas_paletas(palette = palette, reverse = reverse)
pal
scale_color_gradientn(colours = pal(256), ...)
reverse = FALSE
pal <- penguin_pal(palette = palette, reverse = reverse)
pal(256)
scale_color_gradientn(colours = pal(256), ...)
scale_color_gradientn(colours = pal(256))
#' Construtor de cores para escala contínua.
#'
#' @param palette nome da paleta definida em minhas_paletas
#' @param discrete Boolean indica se "color aesthetic" é discreto ou não
#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida
#' @param ... outros parâmetros que serão passados para discrete_scale() ou
#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE
#'
scale_color_penguin <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- penguin_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("penguin_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
scale_color_penguin(palette = "highlight")(5)
scale_color_penguin(palette = "highlight")
scale_color_penguin(palette = "highlight", discrete = FALSE)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("highlight")
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("highlight", discrete = FALSE)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("main", discrete = FALSE)
#| echo: fenced
minhas_paletas <- function(palette = "main", ...) {
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "azul", "amarelo"),
"two_colors" = minhas_cores("cinza", "azul")
)
minhas_paletas[[palette]]
}
scales::show_col(penguin_pal(palette = "two_colors", reverse = TRUE)(12))
#| echo: fenced
minhas_paletas <- function(palette = "main", ...) {
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "azul", "amarelo"),
"two_colors" = minhas_cores("laranja", "vermelho")
)
minhas_paletas[[palette]]
}
scales::show_col(penguin_pal(palette = "two_colors", reverse = TRUE)(12))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("main", discrete = FALSE)
#' Construtor de cores para escala contínua.
#'
#' @param palette nome da paleta definida em minhas_paletas
#' @param discrete Boolean indica se "color aesthetic" é discreto ou não
#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida
#' @param ... outros parâmetros que serão passados para discrete_scale() ou
#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE
#'
scale_color_penguin <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- penguin_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("penguin_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
scale_color_penguin(palette = "highlight", discrete = FALSE)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("two_colors", discrete = FALSE)
#' Construtor de cores para escala contínua.
#'
#' @param palette nome da paleta definida em minhas_paletas
#' @param discrete Boolean indica se "color aesthetic" é discreto ou não
#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida
#' @param ... outros parâmetros que serão passados para discrete_scale() ou
#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE
#'
scale_fill_penguin <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- penguin_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("fill", paste0("penguin_", palette), palette = pal, ...)
} else {
scale_fill_gradientn(colours = pal(256), ...)
}
}
scale_fill_penguin(palette = "highlight", discrete = FALSE)
scales::col_show(scale_fill_penguin(palette = "highlight", discrete = FALSE))
scales::show_col(scale_fill_penguin(palette = "highlight", discrete = FALSE))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_col() +
scale_color_penguin("two_colors", discrete = FALSE)
download.file(https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib?x=eyJpZCI6ICIwOTJiNDM5YS0yMmNkLTQyMmItOTkxMy1hNjFiNjZjODUwNWQiLCAidXNlciI6ICI4MjAiLCAic2lnbmF0dXJlIjogImNlMjYyNmViZmU5MjJlYTcyYmM2YjViOWZkMmE4ZDA0ZWIxMjRiYzA3M2RhY2RlNmUwNzJjODljNmY4ZWY3ZWMifQ==/bibliography.bib)
download.file(https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib)
?download.file
wget(https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib)
wget("https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib")
download.file("https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib")
download.file("https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib", destfile = "references.bib
")
getwd
getwd()
getwd()
library(mlbench)
install.packages("mlbench")
library(mlbench)
data("BostonHousing2")
head(BostonHousing2)
#| echo: fenced
#| warning: false
#| message: false
library(tidyverse)
BostonHousing2 %>% glimpse()
?BostonHousing2
BostonHousing2 %>%
ggplot(aes(x = medv, y = rm)) +
geom_point()
BostonHousing2 %>%
ggplot(aes(x = medv, y = rm)) +
geom_point() +
theme_minimal() +
labs(
x = "Preço médio das casas (1000 US)",
y = "Número médio de quartos por casa"
)
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
theme_minimal() +
labs(
x = "Número médio de quartos por casa",
y = "Preço médio das casas (1000 US)"
)
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = c(0,0.1)))
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = c(-1,0.1)))
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = c(0,0.1)))
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point()
?scale_y_continuous
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = c(0.08,0.1)))
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = c(0.1,0.1)))
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(add = 10))
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(add = 8))
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = 0.1))
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point()
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = 0.1)) +
theme_minimal() +
labs(
x = "Número médio de quartos por casa",
y = "Preço médio das casas (1000 US)"
) +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = 0.1)) +
theme_minimal() +
labs(
x = "Número médio de quartos por casa",
y = "Preço médio das casas (1000 US)"
) +
theme(axis.ticks = element_blank(),
axis.title = element_blank())
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = 0.1)) +
theme_linedraw() +
labs(
x = "Número médio de quartos por casa",
y = "Preço médio das casas (1000 US)"
) +
theme(axis.ticks = element_blank(),
axis.title = element_blank())
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point() +
scale_y_continuous(expand = expansion(mult = 0.1)) +
theme_linedraw() +
labs(
title = "Valor médio das casas pelo número de quartos"
) +
theme(axis.ticks = element_blank(),
axis.title = element_blank())
diamonds %>%
ggplot2(aes(x = carat, y = price)) +
geom_poin()
diamonds %>%
ggplot(aes(x = carat, y = price)) +
geom_poin()
diamonds %>%
ggplot(aes(x = carat, y = price)) +
geom_point()
diamonds %>%
ggplot(aes(x = log10(carat), y = price)) +
geom_point()
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_point()
log10(1)
log10(0.4)
log10(2)
?seq
seq(from = 0, to = 100, by = 0.1)
tibble(x = seq((from = 0, to = 100, by = 0.1)), y = log10(x)) %>% ggplot(aes(x, y)) + geom_point()
tibble(x = seq((from = 0, to = 100, by = 0.1)), y = log10(x))
tibble(x = seq(from = 0, to = 100, by = 0.1), y = log10(x)) %>% ggplot(aes(x, y)) + geom_point()
tibble(x = seq(from = -10, to = 100, by = 0.1), y = log10(x)) %>% ggplot(aes(x, y)) + geom_point()
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point(alpha = 0.2) +
scale_y_continuous(expand = expansion(mult = 0.1)) +
theme_linedraw() +
labs(
title = "Valor médio das casas pelo número de quartos"
) +
theme(axis.ticks = element_blank(),
axis.title = element_blank())
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_point(alpha = 0.2) +
theme_linedraw()
BostonHousing2 %>%
ggplot(aes(x = rm, y = medv)) +
geom_point(alpha = 0.2) +
scale_y_continuous(expand = expansion(mult = 0.1)) +
theme_linedraw() +
labs(
title = "Valor médio das casas pelo número de quartos"
) +
theme(axis.ticks = element_blank(),
axis.title = element_blank())
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_point(alpha = 0.2) +
theme_linedraw()
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_point(alpha = 0.02) +
theme_linedraw()
runif(10)
filter(runif(10 > 0.95))
runif(10)
runif(10)[2]
runif(10)[, > 0.95]
x <- runif(10)
x
x[x > 0.95]
x[x > 0.95,]
x[,x > 0.95]
y <-  x > 0.95
y
x > 0.95
runif(10) > 0.95
runif(10) < 0.95
runif(10) < 0.95
runif(10) < 0.95
runif(10) < 0.95
runif(10) < 0.95
runif(10) < 0.95
runif(10) < 0.95
runif(10) < 0.95
runif(10)
runif(10) < 0.95
(runif(10) < 0.95) == TRUE
(runif(10) < 0.95) == TRUE
(runif(10) < 0.95) == TRUE
install.packages("Rcapture")
library(Rcapture)
bugs <- matrix(c(1,1,1,1,1,0,0,0,0,0,
0,0,1,0,1,1,1,0,0,0,
1,0,1,0,1,0,0,1,1,1),
ncol = 3)
closedp(bugs)
closedp(bugs)$glm$Mt
closedp(bugs)
?closedp
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_hex() +
theme_linedraw()
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_hex(bin = 50) +
theme_linedraw()
?diamonds
diamonds %>%
glimpse()
diamonds %>%
ggplot(aes(x = caract, y = price)) +
geom_hex() +
theme(minimal)
diamonds %>%
ggplot(aes(x = caract, y = price)) +
geom_hex() +
theme_minimal()
diamonds %>%
ggplot(aes(x = carat, y = price)) +
geom_hex() +
theme_minimal()
diamonds %>%
ggplot(aes(x = carat, y = price)) +
geom_hex() +
theme_minimal()
#| label: log-price-carat
#| fig-cap: "Logarítmo de preço e carat"
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_hex(bin = 50) +
theme_linedraw()
?geom_hex
#| label: log-price-carat
#| fig-cap: "Logarítmo de preço e carat"
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_hex(bins = 50) +
theme_linedraw()
#| label: log-price-carat
#| fig-cap: "Logarítmo de preço e carat"
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_hex(bins = 100) +
theme_linedraw()
#| label: log-price-carat
#| fig-cap: "Logarítmo de preço e carat"
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_hex(bins = 800) +
theme_linedraw()
#| label: log-price-carat
#| fig-cap: "Logarítmo de preço e carat"
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_hex(bins = 80) +
theme_linedraw()
#| label: log-price-carat
#| fig-cap: "Logarítmo de preço e carat"
diamonds %>%
ggplot(aes(x = log10(carat), y = log10(price))) +
geom_hex(bins = 50) +
theme_linedraw()
lm_diamonds <- lm(log10(price) ~ log10(carat), data = diamonds)
summary(lm_diamonds)
plot(lm_diamonds)
plot(lm_diamonds)
plot(lm_diamonds, which = 1)
plot(lm_diamonds, which = 3)
```{r}
plot(lm_diamonds, which = 2)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidyverse)
library(tidyverse)
library(tidymodels)
install.packages("tidymodel")
install.packages("tidymodels")
library(tidyverse)
library(tidymodels)
install.packages("lifecycle")
install.packages("lifecycle")
install.packages("lifecycle")
install.packages("lifecycle")
install.packages("lifecycle")
install.packages("lifecycle")
install.packages("lifecycle")
library(tidyverse)
library(tidymodels)
install.packages('performance')
library(performance)
lm_spec <-
linear_reg() %>%
set_model("regression") %>%
set_engine("lm")
lm_spec <-
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm")
lm_fit <- fit(lm_spec, price ~ carat, data = diamonds)
lm_fit %>%
summarise()
lm_fit %>%
summary()
lm_fit %>%
check_model()
lm_fit %>%
extract_fit_engine() %>%
check_heteroscedasticity()
