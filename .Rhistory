panel.grid.major.x = element_blank())
minhas_cores <- function(...) {
cores <- c(
"laranja" = "#e59866",
"cinza" = "#979a9a",
"azul" = "#1b2631",
"vermelho" = "#641e16",
"agua" = "#d1f2eb",
"amarelo" = "#fcf3cf"
)
cols <- c(...)
if (is.null(cols))
return (cores)
cores[cols]
}
minhas_cores("vermelho", "amarelo")
minhas_paletas <- function(palette = "main", ...) {
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "azul", "amarelo")
)
minhas_paletas[[palette]]
}
minhas_paletas("main")
scales::show_col(minhas_paletas("main"), cex_label = 2)
library(tidyverse)
library(palmerpenguins)
penguins <- palmerpenguins::penguins
penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n)) +
geom_col(fill = minhas_cores("laranja")) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins %>%
ggplot(aes(x = species, y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = unname(c(minhas_cores("laranja", "cinza", "amarelo")))) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins_colors <- minhas_cores("laranja", "azul", "vermelho")
penguins_colors <- setNames(penguins_colors, c("Adelie", "Chinstrap", "Gentoo"))
penguins_colors
penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = penguins_colors) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
scales::show_col(colorRampPalette(minhas_paletas("main"))(12), cex_label = 1)
penguins %>%
count(species)
penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = unname(c(minhas_cores("laranja", "cinza", "amarelo")))) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = penguins_colors) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
#| output: false
#| echo: false
library(tidyverse)
library(scales)
library(palmerpenguins)
penguins %>%
count(species, sort = T) %>%
mutate(percent = scales::percent(n/sum(n), scale = 100))
count_percent <- function(df, a_column) {
df %>%
count({{a_column}}) %>%
mutate(percent = scales::percent(n/sum(n), scale = 100))
}
penguins %>%
count_percent(species)
penguins %>%
count_percent(island)
install.packages()
install.packages("r2symbols")
library(r2symbols)
library(r2symbols)
symbol("trademark")
symbol("copyright")
symbol("registered")
library(r2symbols)
penguins %>% glimpse()
penguins %>%
ggplot(aes(bill_length_mm, bill_depth_mm)) +
geom_point()
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm)) +
geom_point()
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
penguins_12_colors <- colorRampPalette(minhas_paletas("main"))(12)
scales::show_col(penguins_12_colors, cex_label = 1)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_binned(values = penguins_12_colors)
penguins_colors <- minhas_cores("laranja", "azul", "vermelho")
penguins_colors <- setNames(penguins_colors, c("Chinstrap", "Gentoo", "Adelie"))
penguins_colors
penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = penguins_colors) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins %>%
count(species) %>%
ggplot(aes(x = fct_reorder(species, desc(n)), y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = penguins_colors) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
scales::show_col(penguins_colors, cex_label = 2)
penguins %>%
count(species) %>%
ggplot(aes(x = fct_reorder(species, n), y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = penguins_colors) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
?show_col
penguins %>%
count(species) %>%
ggplot(aes(x = fct_reorder(species, n), y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = unname(c(minhas_cores("laranja", "azul", "vermelho")))) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins %>%
count(species) %>%
ggplot(aes(x = fct_reorder(species, desc(n)), y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = unname(c(minhas_cores("laranja", "azul", "vermelho")))) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins %>%
count(species) %>%
ggplot(aes(x = fct_reorder(species, desc(n)), y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = penguins_colors) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins_12_colors <- colorRampPalette(minhas_paletas("highlight"))(12)
#| echo: fenced
minhas_paletas <- function(palette = "main", ...) {
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "azul", "amarelo")
)
minhas_paletas[[palette]]
}
penguins_12_colors <- colorRampPalette(minhas_paletas("highlight"))(12)
scales::show_col(penguins_12_colors, cex_label = 1)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "amarelo")
)
#| echo: fenced
minhas_paletas <- function(palette = "main", ...) {
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "amarelo")
)
minhas_paletas[[palette]]
}
penguins_12_colors <- colorRampPalette(minhas_paletas("highlight"))(12)
scales::show_col(penguins_12_colors, cex_label = 1)
?scale_color_continuous
options(ggplot2.continuous.fill = minhas_paletas("highlight"))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
options(ggplot2.continuous.colour = minhas_paletas("highlight"))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
default_opts <- callr::r(function(){options()}); options(default_opts)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
?discrete_scale
penguin_pal <- function(palette = "main", reverse = FALSE, ...) {
pal <- minhas_paletas[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
scales::show_col(penguin_pal(palette = "highlight")(12))
penguin_pal <- function(palette = "main", reverse = FALSE, ...) {
pal <- minhas_paletas(palette)
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
scales::show_col(penguin_pal(palette = "highlight")(12))
scales::show_col(penguin_pal(palette = "highlight", reverse = TRUE)(12))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
#| echo: fenced
minhas_cores <- function(...) {
cores <- c(
"laranja" = "#e59866",
"cinza" = "#979a9a",
"azul" = "#1b2631",
"vermelho" = "#641e16",
"agua" = "#d1f2eb",
"amarelo" = "#fcf3cf"
)
cols <- c(...)
if (is.null(cols))
return (cores)
cores[cols]
}
minhas_cores("vermelho", "amarelo")
#| echo: fenced
minhas_paletas <- function(palette = "main", ...) {
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "amarelo")
)
minhas_paletas[[palette]]
}
minhas_paletas("main")
#| echo: fenced
scales::show_col(minhas_paletas("main"), cex_label = 2)
#| echo: fenced
#| warning: false
#| message: false
library(tidyverse)
library(palmerpenguins)
penguins <- palmerpenguins::penguins
penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n)) +
geom_col(fill = minhas_cores("laranja")) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) + # aumenta em 10% o eixo y positivo
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins %>%
count(species) %>%
ggplot(aes(x = species, y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = unname(c(minhas_cores("laranja", "azul", "vermelho")))) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins_colors <- minhas_cores("laranja", "azul", "vermelho")
penguins_colors <- setNames(penguins_colors, c("Gentoo", "Chinstrap", "Adelie"))
penguins_colors
scales::show_col(penguins_colors, cex_label = 2)
penguins %>%
count(species) %>%
ggplot(aes(x = fct_reorder(species, desc(n)), y = n, fill = species)) +
geom_col() +
scale_fill_manual(values = penguins_colors) +
labs(title = "Contagem de espécies") +
scale_y_continuous(expand = expansion(mult = c(0,0.1))) +
theme_linedraw() +
theme(axis.ticks = element_blank(),
axis.title = element_blank(),
panel.grid.major.x = element_blank())
penguins_12_colors <- colorRampPalette(minhas_paletas("highlight"))(12)
scales::show_col(penguins_12_colors, cex_label = 1)
penguin_pal <- function(palette = "main", reverse = FALSE, ...) {
pal <- minhas_paletas(palette)
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
scales::show_col(penguin_pal(palette = "highlight", reverse = TRUE)(12))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point()
#' Construtor de cores para escala contínua.
#'
#' @param palette nome da paleta definida em minhas_paletas
#' @param discrete Boolean indica se "color aesthetic" é discreto ou não
#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida
#' @param ... outros parâmetros que serão passados para discrete_scale() ou
#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE
#'
scale_color_penguin <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- minhas_paletas(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("penguin_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
palette = "main"
pal <- minhas_paletas(palette = palette, reverse = reverse)
pal
scale_color_gradientn(colours = pal(256), ...)
reverse = FALSE
pal <- penguin_pal(palette = palette, reverse = reverse)
pal(256)
scale_color_gradientn(colours = pal(256), ...)
scale_color_gradientn(colours = pal(256))
#' Construtor de cores para escala contínua.
#'
#' @param palette nome da paleta definida em minhas_paletas
#' @param discrete Boolean indica se "color aesthetic" é discreto ou não
#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida
#' @param ... outros parâmetros que serão passados para discrete_scale() ou
#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE
#'
scale_color_penguin <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- penguin_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("penguin_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
scale_color_penguin(palette = "highlight")(5)
scale_color_penguin(palette = "highlight")
scale_color_penguin(palette = "highlight", discrete = FALSE)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("highlight")
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("highlight", discrete = FALSE)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("main", discrete = FALSE)
#| echo: fenced
minhas_paletas <- function(palette = "main", ...) {
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "azul", "amarelo"),
"two_colors" = minhas_cores("cinza", "azul")
)
minhas_paletas[[palette]]
}
scales::show_col(penguin_pal(palette = "two_colors", reverse = TRUE)(12))
#| echo: fenced
minhas_paletas <- function(palette = "main", ...) {
minhas_paletas <- list(
"main" = minhas_cores("laranja", "cinza", "vermelho", "amarelo"),
"highlight" = minhas_cores("agua", "azul", "amarelo"),
"two_colors" = minhas_cores("laranja", "vermelho")
)
minhas_paletas[[palette]]
}
scales::show_col(penguin_pal(palette = "two_colors", reverse = TRUE)(12))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("main", discrete = FALSE)
#' Construtor de cores para escala contínua.
#'
#' @param palette nome da paleta definida em minhas_paletas
#' @param discrete Boolean indica se "color aesthetic" é discreto ou não
#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida
#' @param ... outros parâmetros que serão passados para discrete_scale() ou
#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE
#'
scale_color_penguin <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- penguin_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("colour", paste0("penguin_", palette), palette = pal, ...)
} else {
scale_color_gradientn(colours = pal(256), ...)
}
}
scale_color_penguin(palette = "highlight", discrete = FALSE)
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_point() +
scale_color_penguin("two_colors", discrete = FALSE)
#' Construtor de cores para escala contínua.
#'
#' @param palette nome da paleta definida em minhas_paletas
#' @param discrete Boolean indica se "color aesthetic" é discreto ou não
#' @param reverse Boolean indica se a paleta deve ter a sequência de cores invertida
#' @param ... outros parâmetros que serão passados para discrete_scale() ou
#'            scale_color_gradientn(), uma das duas funções conforme o discrete é TRUE ou FALSE
#'
scale_fill_penguin <- function(palette = "main", discrete = TRUE, reverse = FALSE, ...) {
pal <- penguin_pal(palette = palette, reverse = reverse)
if (discrete) {
discrete_scale("fill", paste0("penguin_", palette), palette = pal, ...)
} else {
scale_fill_gradientn(colours = pal(256), ...)
}
}
scale_fill_penguin(palette = "highlight", discrete = FALSE)
scales::col_show(scale_fill_penguin(palette = "highlight", discrete = FALSE))
scales::show_col(scale_fill_penguin(palette = "highlight", discrete = FALSE))
penguins %>%
filter(!is.na(bill_length_mm),
!is.na(bill_depth_mm)) %>%
ggplot(aes(bill_length_mm, bill_depth_mm, color = flipper_length_mm)) +
geom_col() +
scale_color_penguin("two_colors", discrete = FALSE)
download.file(https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib?x=eyJpZCI6ICIwOTJiNDM5YS0yMmNkLTQyMmItOTkxMy1hNjFiNjZjODUwNWQiLCAidXNlciI6ICI4MjAiLCAic2lnbmF0dXJlIjogImNlMjYyNmViZmU5MjJlYTcyYmM2YjViOWZkMmE4ZDA0ZWIxMjRiYzA3M2RhY2RlNmUwNzJjODljNmY4ZWY3ZWMifQ==/bibliography.bib)
download.file(https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib)
?download.file
wget(https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib)
wget("https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib")
download.file("https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib")
download.file("https://api.citedrive.com/bib/092b439a-22cd-422b-9913-a61b66c8505d/references.bib", destfile = "references.bib
")
getwd
getwd()
getwd()
