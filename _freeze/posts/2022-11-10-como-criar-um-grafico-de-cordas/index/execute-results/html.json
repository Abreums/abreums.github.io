{
  "hash": "9bc8e149030e6f0a5c4154f807ce2d56",
  "result": {
    "markdown": "---\ntitle: \"Como construir um gráfico de tendência com datas\"\ndescription: \"Um gráfico de tendência com datas é uma ferramenta para ajudar na análise da performance do trabalho.\"\ndate: 2022-11-10\nauthor: \n  - name: Marcos Abreu\n    url: https://abreums.github.io\n    orcid: 0000-0003-4772-7955\ncitation:\n  type: post-weblog\n  url: https://abreums.github.io/posts/2019-11-10-como-criar-um-grafico-de-cordas/\n  language: pt-br\nimage: grafico-cordas.png\ncategories: [Gestão, Rstats]\n---\n\n\nVou mostrar aqui como montar um gráfico de tendência com datas. Este gráfico é muito útil para acompanhar a performance do trabalho conforme descrito [aqui](https://abreums.github.io/posts/2022-11-10-rastreando-a-performance-do-trabalho/).\n\n## Office\n\nPara montar o gráfico, seja no MS-Office, ou no Google-Docs, ou ainda no LibreOffice, o processo é muito semelhante. Vou utilizar o Google-Docs, mas não há diferenças significativas para outros ambientes.\n\nPara iniciar os dados devem estar organizados em forma tabular conforme mostrado na\n\n![fig-1](fig-1.png) Selecionando a área dos dados, selecione *Incluir novo gráfico*, e o tipo \"Gráfico de Dispersão\" (*Scatter Diagram*).\n\nVocê deve garantir que haja uma série de dados definida para cada coluna de cada resultado intermediário. Para cada uma das séries você deve solicitar que seja incluída uma linha de tendência.\n\n![Editor de Gráficos do Calc](fig-2.png)\n\nO que nos gera um gráfico na forma:\n\n![Scatter Diagram](grafico-cordas.png)\n\nUm problema com todas estas ferramentas é que não é possível transmutar os eixos e colocar o ponto (0,0) no canto superior esquerdo. Por isto, as tendências devem ser visualizadas da esquerda para a direita e não de cima para baixo.\n\n## GGPLOT2\n\nOutra opção é utilizar a biblioteca ggplot2 do tidyverse para construir um gráfico mais customizado.\n\nNeste caso, os dados são arrumados dentro de um *tibble* conforme mostrado abaixo:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| warning: false\n#| error: false\n#| message: false\nlibrary(tidyverse)\nentregas <- \n  tibble(status = c(as.Date(\"2000-03-01\"), as.Date(\"2000-03-15\"), \n                  as.Date(\"2000-04-01\"), as.Date(\"2000-04-15\"), \n                  as.Date(\"2000-05-01\"), as.Date(\"2000-05-15\")),\n         m1 = c(as.Date(\"2000-03-10\"), as.Date(\"2000-03-20\"), \n                  as.Date(\"2000-03-22\"), NA, NA, NA),\n         m2 = c(as.Date(\"2000-03-25\"), as.Date(\"2000-03-30\"), \n                  as.Date(\"2000-04-05\"), as.Date(\"2000-04-10\"), NA, NA),\n         m3 = c(as.Date(\"2000-03-31\"), as.Date(\"2000-03-31\"), \n                  as.Date(\"2000-04-15\"), as.Date(\"2000-04-20\"), \n                  as.Date(\"2000-04-25\"), NA),\n         m4 = c(as.Date(\"2000-04-10\"), as.Date(\"2000-04-10\"), \n                  as.Date(\"2000-04-22\"), as.Date(\"2000-04-30\"), \n                  as.Date(\"2000-05-10\"), as.Date(\"2000-05-25\")),\n         m5 = c(as.Date(\"2000-04-30\"), as.Date(\"2000-04-30\"),\n                as.Date(\"2000-05-05\"), as.Date(\"2000-05-20\"),\n                as.Date(\"2000-05-30\"), as.Date(\"2000-05-30\"))\n         )\n\nentregas |> glimpse()\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 6\n$ status <date> 2000-03-01, 2000-03-15, 2000-04-01, 2000-04-15, 2000-05-01, 20…\n$ m1     <date> 2000-03-10, 2000-03-20, 2000-03-22, NA, NA, NA\n$ m2     <date> 2000-03-25, 2000-03-30, 2000-04-05, 2000-04-10, NA, NA\n$ m3     <date> 2000-03-31, 2000-03-31, 2000-04-15, 2000-04-20, 2000-04-25, NA\n$ m4     <date> 2000-04-10, 2000-04-10, 2000-04-22, 2000-04-30, 2000-05-10, 20…\n$ m5     <date> 2000-04-30, 2000-04-30, 2000-05-05, 2000-05-20, 2000-05-30, 20…\n```\n:::\n:::\n\n\nPara desenharmos o gráfico como queremos precisamos de uma função que faça a transposição dos valores dos eixos, colocando o ponto (0,0) no canto superior esquerdo.\n\nPara isto temos a função *c_trans* definida no código a seguir.\n\nA estrutura do *tibble* é modificada para ficar num formato *tidy*.\n\nPor fim, montamos o gráfico com pontos e linhas.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: fig-1\n#| warning: false\n#| message: false\n#| fig-cap: \"Gráfico de cordas\"\n\n# using the function from @Marcelo from this link \n# https://stackoverflow.com/questions/43625341/reverse-datetime-posixct-data-axis-in-ggplot \n# to invert the data axis: \nlibrary(scales) # for as.trans\nlibrary(ggtext) # for markdown\nlibrary(grid) # arrow\n# c_trans <- function(a, b, breaks = b$breaks, format = b$format) {\n#   a <- as.trans(a)\n#   b <- as.trans(b)\n# \n#   name <- paste(a$name, b$name, sep = \"-\")\n# \n#   trans <- function(x) a$trans(b$trans(x))\n#   inv <- function(x) b$inverse(a$inverse(x))\n# \n#   trans_new(name, trans, inverse = inv, breaks = breaks, format=format)\n# }\n# rev_date <- c_trans(\"reverse\", \"time\")\n\nm_entregas <- \n  entregas %>% \n  pivot_longer(cols = c(m1, m2, m3, m4, m5),\n               names_to = \"milestone\", \n               values_to = \"previsto\")\n\ny_breaks <- m_entregas %>% distinct(status) %>% arrange(status) %>% pull()  #%>% as.POSIXct()\n\nm_labels <- m_entregas %>% filter(status <= min(status)) # %>% mutate(status = as.POSIXct(status - 2), previsto = as.POSIXct(previsto + 3))\n\n\nreverse2_trans <- function() {\n  trans_new(\n    \"reverse2\",\n    function(x) -1 * as.numeric(x), # Force values to be numeric for Date objects\n    function(x) -1 * as.numeric(x)\n  )\n}\n\n\nm_entregas %>% \n  # mutate(status = as.POSIXct(status),\n  #        previsto = as.POSIXct(previsto)) %>% \n  ggplot(aes(x = previsto, y = status, group = milestone, colour = milestone)) +\n  geom_point() +\n  geom_line() +\n  geom_text(data = m_labels, aes(x = previsto, y = status, label = milestone)) +\n  scale_y_continuous(\n    trans = c(\"date\", \"reverse2\")\n  ) +\n  #scale_y_reverse(trans = rev_date, breaks = y_breaks, labels = ~ strftime(., \"%b %d\")) +\n  labs(title = \"Previsão das Entregas\",\n       x = NULL,\n       y = NULL) +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.title = element_markdown(lineheight = 1.1),\n    axis.text.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.major.y = element_line(arrow = arrow(angle = 20, length = unit(0.1, \"inches\"), type = \"closed\"))\n  ) \n```\n````\n\n::: {.cell-output-display}\n![Gráfico de cordas](index_files/figure-html/fig-1-1.png){#fig-1 width=672}\n:::\n:::\n\n\nUm colega que trabalhava comigo costumava chamá-lo de **Gráfico de Cordas**. Nunca achei referência que utiliza-se este nome, pois trata-se na verdade de um gráfico de dispersão composto com um gráfico de linhas (ou um de tendência como mostrei no exemplo em Calc), mas ainda assim costumo utilizar este nome.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}