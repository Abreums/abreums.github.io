{
  "hash": "4d273764a64ecefb8c0fb92ce90351fc",
  "result": {
    "markdown": "---\ntitle: \"count, percentuais e curly-curly\"\nauthor: \"Marcos Abreu\"\ndate: \"2022-10-10\"\nimage: \"count_percent.png\"\ncategories: [R]\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.2      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n:::\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\n```\n:::\n\n\nO método *count* do pacote *dplyr* é um dos que mais utilizo durante o trabalho de *data wrangling*.\n\nUma das coisas que gosto de fazer é acrescentar uma coluna com valores percentuais:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  count(species, sort = T) %>% \n  mutate(percent = scales::percent(n/sum(n)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  species       n percent\n  <fct>     <int> <chr>  \n1 Adelie      152 44.2%  \n2 Gentoo      124 36.0%  \n3 Chinstrap    68 19.8%  \n```\n:::\n:::\n\n\nMeu próximo passo foi começar a diminuir o copia e cola de código e escrever pequenas funções para ajudar no código:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_percent <- function(df, a_column) {\n  df %>% \n    count({{a_column}}) %>% \n    mutate(percent = scales::percent(n/sum(n)))\n}\n\npenguins %>% \n  count_percent(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  species       n percent\n  <fct>     <int> <chr>  \n1 Adelie      152 44.2%  \n2 Chinstrap    68 19.8%  \n3 Gentoo      124 36.0%  \n```\n:::\n\n```{.r .cell-code}\npenguins %>% \n  count_percent(island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  island        n percent\n  <fct>     <int> <chr>  \n1 Biscoe      168 49%    \n2 Dream       124 36%    \n3 Torgersen    52 15%    \n```\n:::\n:::\n\n\nPara esta função funcionar é preciso utilizar o operador curly-curly*.*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}