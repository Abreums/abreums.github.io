{
  "hash": "ab99e3ba47f644fdec9ae415daca5a3a",
  "result": {
    "markdown": "---\ntitle: \"Data Storytelling\"\ndescription: \"Storytelling faz com que sua mensagem seja mais efetiva. Mas como contar uma história ao criar um gráfico para ler dados?\"\ndate: 2023-04-02\nauthor: \n  - name: Marcos Abreu\n    url: https://abreums.github.io\n    orcid: 0000-0003-4772-7955\ncitation:\n  type: post-weblog\n  url: https://abreums.github.io/posts/2023-04-02-data-storytelling/\n  language: pt-br\nimage: plot.png\ncategories: [Rstats]\n---\n\n\nComo muito dos posts do meu blog, este não é original. De fato é uma cópia de publicações e vídeos de outros autores, e deixo aqui os links das fontes:\n\n-   eu comecei com este [twitte](https://twitter.com/rappa753/status/1641621354565992449)\n\n-   e depois com este [video](https://www.youtube.com/watch?v=st7_vPjq0SU)\n\n-   e este [post](https://albert-rapp.de/posts/ggplot2-tips/10_recreating_swd_look/10_recreating_swd_look.html)\n\nEu faço esta cópia de conteúdo porque é uma forma minha de assimilar a informação e sempre que possível transformá-la um pouquinho colocando minha contribuição.\n\nDado os devidos créditos, vamos ao conteúdo.\n\n## Primeiro os dados\n\nEu comecei gerando meus próprios dados. Ao contrário dos links apresentados, eu queria ver como seria trabalhar com um número menor de registros. Por isto eu criei apenas 7 registros.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| warning: false\n#| message: false\n\nlibrary(tidyverse)\n\nset.seed(2)\n\nmydata <- tibble(\n  id = as.character(1:7),\n  accuracy = rnorm(7, mean = 75, sd = 8),\n  error = rnorm(7, mean = 7, sd = 3),\n  null = 100 - accuracy - error\n)\n# não é garantido que null > 0... então vamos ajustar\nmydata <- \n  mydata |> \n  mutate(accuracy = ifelse(null < 0, accuracy + null, accuracy),\n         null = ifelse(null < 0, 0, null)) |> \n  mutate(across(accuracy:null, ~./100)) \n\nmydata_pivot <- \n  mydata |> \n  pivot_longer(cols = accuracy:null,\n               names_to = \"type\",\n               values_to = \"value\")\n```\n````\n:::\n\n\nE o gráfico inicial:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| warning: false\n#| message: false\nmydata_pivot |>\n  ggplot(aes(\n    x = id,\n    y = value,\n    fill = factor(type, levels = c('error', 'null', 'accuracy'))\n  )) +\n  geom_col() +\n  labs(\n    titles = 'Accuracy rates',\n    x = 'ID',\n    y = 'percent',\n    fill = element_blank()\n  ) +\n  scale_y_continuous(labels = ~ scales::percent(., accuracy = 1),\n                     breaks = seq(0, 1, 0.1))\n```\n````\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Base em cinza\n\nOs dois primeiros passos são:\n\n-   Inverter os eixos para manter os nomes na horizontal.\n\n-   Construir uma base cinza para dar realce ao destaque que será criado.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| warning: false\n#| message: false\n\nmydata_pivot |>\n  ggplot(aes(\n    x = value,\n    y = id,\n    group = factor(type, levels = c('error', 'null', 'accuracy'))\n  )) +\n  geom_col(color = 'white') +\nlabs(\n  titles = 'Accuracy rates',\n  x = 'percent',\n  y = 'ID',\n  fill = element_blank()\n) +\n  scale_x_continuous(labels = ~ scales::percent(., accuracy = 1),\n                     breaks = seq(0, 1, 0.1)) \n```\n````\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Acrescentar um ponto de referência\n\nVamos utilizar a média dos valores como ponto de referência.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| warning: false\n#| message: false\n\npivoted_data <- \n  mydata |> \n  pivot_longer(cols = accuracy:null,\n               names_to = \"type\",\n               values_to = \"value\") \n\nmedias <- \n  pivoted_data |> \n  group_by(type) |> \n  summarise(value = mean(value)) |> \n  mutate(id = 'ALL')\n\nsaved_mean_error = medias$value[medias$type == 'error']\n\nmydata_com_media <- pivoted_data |> bind_rows(medias)\n\nprep_data <-\n  mydata_com_media |>\n  pivot_wider(names_from = type,\n              values_from = value) |>\n  mutate(order_crit = error) |>\n  pivot_longer(cols = accuracy:null,\n               names_to = \"type\",\n               values_to = \"value\")\n```\n````\n:::\n\n\n## Ordenar os dados\n\nTemos que escolher qual informação seria relevante para nosso leitor.\n\nNeste exemplo, o termo 'accuracy' para ser algo de valor. De outro lado, a variável 'error' também parece ser algo que precisa ser observado.\n\nVamos dar enfoque para a variável error, ordenado por ela.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| warning: false\n#| message: false\n\nprep_data <- \n  prep_data |>\n  mutate(type = factor(type, levels = c('error', 'null', 'accuracy'), ordered = TRUE),\n         id = fct_reorder(id, order_crit, .desc = T))\n\nmyplot <- \nprep_data |>\n  ggplot(aes(\n    x = value,\n    y = id,\n    group = type\n  )) +\n  geom_col(aes(group = type), \n           color = 'white') +\nlabs(\n  titles = 'Accuracy rates',\n  x = 'percent',\n  y = 'ID',\n  fill = element_blank()\n) +\n  scale_x_continuous(labels = ~ scales::percent(., accuracy = 1),\n                     breaks = seq(0, 1, 0.1)) \n\nmyplot\n```\n````\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Coloque a escala x no topo\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmyplot +\n  scale_x_continuous(position = \"top\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nScale for x is already present.\nAdding another scale for x, which will replace the existing scale.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Dê destaque à história que você quer contar\n\nQueremos destacar os elementos com valores de 'erro' grande.\n\nPor isto, vamos dar destaque para as linhas com estes valores em relação às demais.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Escolhas as cores que vai utilizar\nunhighlighted_color <- 'grey80'\nhighlighted_color <- '#E69F00'\navg_error <- 'black'\navg_rest <- 'grey40'\n\n# Compute new column with colors of each bar\ncolored_data <- \n  prep_data |> \n  mutate(\n    custom_colors = case_when(\n      id == 'ALL' & type == 'error' ~ avg_error,\n      id == 'ALL' ~ avg_rest,\n      type == 'error' & value > saved_mean_error ~ highlighted_color,\n      T ~  unhighlighted_color\n    )\n  )\n\nmyplot <- \n  colored_data |> \n  ggplot(aes(x = value, y = id)) +\n  geom_col(\n    aes(group = type),\n    col = 'white',\n    fill = colored_data$custom_colors # Set colors manually\n  )\nmyplot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmyplot <- \nmyplot +\n    coord_cartesian(\n    xlim = c(0, 1), \n    ylim = c(0.5, 7.5), \n    expand = F, # removes white spaces at edge of plot\n    clip = 'off' # allows drawing outside of panel\n  )\nmyplot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}